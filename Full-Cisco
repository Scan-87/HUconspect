### MAC
 1. mac address - весит 48 бит, потому что это 48 цифр
00:00:00:00:00:00 - 6 раз по 2 шестандцатиричные цифры = 6*2*4 = 48 бит = 6 байт
 2. FF:FF:FF:FF:FF:FF - широковещательный мак адрес. Когда ПК1 появляется в сети, то ПК1 создает фрейм в который destination address кладёт
 этот широковещательный адрес и кричит им в сеть, при получении коммутатором фрейма с адресом назначения он рассылает его на все свои сетевые порты, 
 каждый компьютер делает запись к себе в ARP таблицу таким образом все устройства в данной сети узнают о существовании нового компа. 
 И второй случай когда ПК1 пытается найти ПК2
 
 ### IP
 1. ip address - весит 32 бита, потому что это 4 октета(по 8 бит)
000.000.000.000 - от 000 до 255 максимум или 11111111 в двоичной системе(8 бит) = 4*8 = 32 бита = 4 байта
 2. первый айпишник в подсети всегда зарезервирован, для гетвея, что бы пк знал к кому обратиться если он не найдет адресата в своей сети
 3. последний айпи в подсети всегда зарезервирован для броадкаста

## Серые сети
 1. 10.0.0.0 /8 - 10.255.255.255
 2. 192.168.0.0 /16 - 192.168.255.255
 3. 172.16.0.0 /12 - 172.31.255.255
 4. 169.254.0.0 /12 - 169.254.255.255 - дефолтная сеть винды
 5. 127.0.0.0 /8 - лупбэк диапазон
 6. 224.0.0.0 /16 - сеть для мультикаст трафика
 
 ### Порт
 1. порт весит 16 бит и может принимать значения от 0 до 65535
0 порт 0000_0000_0000_0000
65535 порт 1111_1111_1111_1111
 2. делятся на три вида 
системные(общеизвестные) 0-1023
 зарегестрированные 1024-49151
свободные 49152-65535

### MASK
маска сети - нужна что бы понимать где в айпи адресе домен а где подсеть и номер данной машины
 в короткой записи маски бывают от 0 до 32
  8 - 11111111.00000000.00000000.00000000 - 255.0.0.0
  16 - 11111111.11111111.00000000.00000000 - 255.255.0.0
  24 - 11111111.11111111.11111111.00000000 - 255.255.255.0
  25 - 11111111.11111111.11111111.10000000 - 255.255.255.128
  26 - 11111111.11111111.11111111.11000000 - 255.255.255.64
  27 - 11111111.11111111.11111111.11100000 - 255.255.255.32
  28 - 11111111.11111111.11111111.11110000 - 255.255.255.16
  29 - 11111111.11111111.11111111.11111000 - 255.255.255.8
  30 - 11111111.11111111.11111111.11111100 - 255.255.255.4
  31 - 11111111.11111111.11111111.11111110 - 255.255.255.2
  
  ### DHCP
 ## Процедура получения динамеческого айпи
 1. новый компьютер ПК отправляет discover широковещательный запрос
 2. все dhcp сервера кто его услышали высылают ему оффер с предложением сетевых настроек(ip в том числе)
 3. ПК принимает первый пришедший оффер и для подтверждения отправляет requets что он готов взять эти настройки
 4. dhcp сервер в получив request отправляет для ПК ack (acknowledgment) - признание что за ним закреплён этот айпи
 5. остальные dhcp чей оффер не приняли какое то (не большое) время хранят зарезервированный в оффере айпи а потом высвобождают его
 6. dhcp сервер чей оффер приняли отправляет каждые 50 % 75% 100% времени использования айпи адреса запрос к ПК в сети ли он и пользуется ли ещё айпишником 

## Виды пакетов
 1. DHCPDECLINE - широковещательное сообщение отказа DHCP из за конфликта адресов, появляется в случае когда винда после принятия айпишки от dhcp проверяет 
 не обманул ли он и отправляет в сеть что у неё теперь такой айпи, но если ей кто то ответит что такой айпи уже есть в сети то винда выкрикнет в сеть DHCPDECLINE 
 чтобы другие поняли что такой айпи есть??? или что dhcp неадекватен???  затем этот айпи заносится в блэклист на винде чтобы потом админ мог это посмотреть
 2. DHCPNAK - сообщение отказа от аренды айпи адреса который можно послать в ответ на ack запрос от dhcp
 3. DHCPRELEASE -  сообщение о том что айпи адрес нужно освободить
 
 ### Cisco общее
 1. enable или en - переход в privelege exec mode (расширенный режим)
 2. configure terminal или conf t - переход в global configuration mode - глобальная конфигаруция
 3. exit - выйти из текущего режима в предыдущий
 4. ctrl shift 6 - прекратить запущенную программу
 5. do write
 6. sh run | ? - аналог пайпа
 7. do - команда которая помогает вызвать режиме глобального конфига команды привелегированного режима, но автодополнение в них работать не будет
 8. username my_user password my_passwd - задать пользователя и пароль
 9. username my_user password 0 my_passwd - вывод программы после применения создания нового пользователя  - здесь 0 это уровень пользователя 0 - бесправный, 
 15 самый крутой рут
 10. service password-encryption - шифрует уже созданные пароли у пользователей (но шифрует не надёжно, лучше использовать secret)
 11. username my_user2 privilege 15 secret my_paswd - создать пользователя с привилегиями рута и сразу хорошо зашифрованным паролем
 12.  aaa new-model - включение режима авторизации для пользователей на циске, потому что по дефолту туда не попасть
 13. enable password new_pass - задать пароль для перехода в privelege exec mode но зашифрованный старыми алгоритмами не надёжно
 14. enable secret new_passwd - задать пароль для перехода в privelege exec mode но только лучше зашифрованный
 15. banner motd c your big message c - показывает дефолтное собщение когда заходишь на циску
 16. interface e0/0 - переход к конфигурации интерфейса 0/0
 17. show mac address-table
 18. show running-config 
 19. sh run
 20. no ip domain lookup - чтобы он не пытался зарезолвить не существующие хосты и не тупил если мы опечатались
 
 ### L2 коммутатор
 ## VLan
 1. show vlan brief - список виланов на коммутаторе
 2. show vlan 
 3. sh int trunk
 4. interface vlan 1 - создать вилан с именем 1
 5. ip address 172.30.51.01 255.255.255.0 - задать айпишку в нем
 6. no shutdown - включаем его
 7. hostname sw1 - изменить своё хостовое имя
 8. show spannig-tree vlan 1 - ???
 9. no spannig-tree vlan 1 - ???

 10. vlan 150 - создать вилан, нужно делать в нужном интерфейсе
 11. name progs - задать ему имя

 #  от коммутатора к пк
 12. int range e0/1-2 - зайти в конфиг нескольких портов
 13. switchport mode access - включить режим доступа к портам по вилану
 14. switchport access vlan 150 - задать разрешенный номер вилана на портах

 # между коммутаторами 
 15. sh int e0/1 trunk - посмотреть настройки на интерфейсе
 16. switchport trunk encapsulation dotlq
 17. switchport mode trunk
  
 ## VTP сервер виланов 
 18. vtm mode server - включить режим сервера
 19. do vtp primary - при каждом включении свитча, иначе не робит как главный сервер
 20. do vtp promary force 
 21. vtp version 3 - поменять версию протокода используемого на сервере
 22. vtp domain hacker.hru - установить доменное имя серверу
 23. vtp password 12345 - задать пароль серверу
 24. vtp password 12345 hidden - не выводить лог
 25. show vtp status - показывает стату по втп

# ввести свитч в домен виланов
 26. vtp mode client 
 27. vtp version 3
 28. vtp domain hacker.hru - 
 29. vtp password 12345 hidden

## Port security 
 защита сетевого порта на основе мак адреса
 1. switchport port-security  включить режим защиты порта
 2. switchport port-security mac-address sticky - режим защиты порта что бы она помнила какой мак подключался в порт
 3. switchport port-security maximum 2 - выставить максимум запоминаемых мак адресов
 4. switchport port-security violation ? - там выбор одного из трех режимов действий при нарушении
 
 ### L3 роутер 
 ## Общее
 1. no service config - удаляет строчку из конфига для того что бы роутер не пытался сам себя сконфигурировать и не лез на всякие ftp сервис, потом сохранить и перезапустить
 2. duplex full - переключение дуплексов в full режим т.к. имадж роутера идет с по дефолту включенными халф дуплексами
 3. show arp - показать записи в арп таблице чтобы увидеть на роутере себя и гейтвей который мы раздаем
 4. sh ip route - правила по которым роутер направляет трафик
 5. 172.30.51.12 - белый айпи eve-engine школы

 ## Настройка интерфейса
 6. int e0/0
 7. ip address new_ip new_mask - задать свой айпи адрес и маску
 8. no shutdown

 ## DHCP для каждого интерфейса
 9. ip dhcp pool dhcp1 - создание пула айпи адресов
 10. network start_ip ip_mask - прописываем начало сети и маску
 11. default-router my_ip - адрес гетвея (адрес интерфейса)
 12. dns-server ip_of_dns ip_of_dns2 ip_of_dns3 - указываем разадавемые всем днс сервера
 13. domain-name my_domain_name - указываем раздаваемое всем доменное имя

 14. ip dhcp excluded-address from_ip to_ip - диапазон айпи адресов которые мы не хотим что бы раздавал наш dhcp сервер
 15. show ip dhcp binding - показывает какие адреса раздал dhcp


 ## DNS
 16. ip domain-name my_domain_name - задать доменное имя
 17. ip name-server 8.8.8.8 8.8.4.4 - задать днс, если мы потом будем настраивать днс сервер на роутере то здесь нужно поменять настройки на свой айпи
 18. ip domain-lookup - включаем что бы роутер стал днс сервером
 19. ip dns server - включает чтобы роутер раздавал днс записи
 20. ip host pc7.hackeru.local 10.0.0.103 - занесли в таблицу днс записть

 21. ip dhcp pool my_pool - зайти в редактирование своего пула
 22. dns-server ip_of_dns_server - указать какой для этого пулла адресов будет днс сервер(в нашем случае был тот же что и дшцп сервер)


 ## NAT
 23. sh ip nat tr - посмотреть таблицу трансляций
 24. show dhcp lease - посмотреть белый ип на роутере
 25. ip nat inside source static any_local_pc_ip router_white_ip - или можно записать вот так
ip nat inside source static 10.0.0.83 e0/1
 26. int e0/0 - зайти в интерфейс 
 27. ip nat inside - запустить нат на нужном интерфейсе
 28. int e0/1 - переключиться на внешний интерфейс
 29. ip nat outside - запустить на нём нат

 30. access-list 100 permit ip 10.0.0.0 0.0.0.255 any - создали правило с названием 100 что всем айпишникам из нашей сети мы разрешаем ходить по протоколу айпи в любую сеть
 31. ip nat inside source list 100 int e0/1 overload - перезаписать правило для ната

 ## VLan создание виртуальных интерфейсов
 32. int e0/0.150 - создание виртуального порта с названием 150(просто что бы совпадало с названием вилана) на этом интерфейсе
 33. encapsulation dotlQ 150 - то как мы обрабатываем вилан на этом интерфейсе, т.е. инкапсуляция трафика будет происходить по стандарту dotlQ и этот виртуальный интерфейс 
 будет обслуживать фреймы с тегом 150
 34. ip address 10.0.1.254 255.255.255.0 - задаем айпи этого интерфейса

 ## ACL
 создается список, который потом применяется к какому либо интерфейсу
 35. sh access-list - список разрешений
 36. ip access-list extended censored - создать общий список исключаюющий который мы назвали цензура
 37. permit ip 10.0.1.0 0.0.0.127 host 10.0.2.1 log - список айпи адресов и вайлд маск которым будет разрешено ходить на хост и логировать
 38. deny ip any any - запрещает все остальные коннекты
 39. do wr
 40. ex
 41. int e0/0.8
 42. ip access-group censored in - все кто приходит на интерфейс 0.8 будут на входе проверяться по созданному листу censored
 43. do wr
 44. ex
 45. ip access-list extend censored - зайти в редактирование правила
 46. 9 permit ip 10.0.1.0 0.0.0.127 10.0.1.0 0.0.0.127 - разрешить с более высоким приоритетом 9 ходить всем из подсети в эту же подсеть

 ## RIP
 после настройки айпи адресов на интерфейсах
 47. router rip 
 48. version 2
 49. network 10.0.8.0 - то в какую сеть мы делимся маршрутами
 50. чтобы побаловаться 
 51. нужно создать ещё один роутер в сети и настроить его в рип протокол
 52. int loopback 0 - редактировать локальный интерфейс
 
 53. ip address 8.8.8.8 255.255.255.255
 54. no sh
 55. получается мы сделали у себя луп интерфейс у которого адрес как у днс сервера, для того что бы все ходили к нам за днс записями
 56. router rip
 57. redistribute connected - передавать не рип маршруты но ещё и коннектед(в данном случае это мой локальный луп)
 
 ## OSPF
 после настройки айпи адресов на интерфейсах
 1. router ospf 1 
 2. network 11.0.5.0 0.0.0.255 area 0  - говорим что будем делиться маршрутами в следующую сеть и указываем вайл кард маск и арию
 
 ### Kali linux
 1. arp -a -посмотреть ARP таблицу
 2. arp -s ip_addr mac_addr - записать статический адрес в ARP таблицу
 3. vim /etc/network/interfaces - создать новый сетевой интерфейс 
    auto eth0
    iface eth0 inet dhcp
service networking restart - перезапустить сервис чтоб подхватились настройки
 4. arpspoof -i eth0 -t some_ip another_ip - запускаем передачу arp пакетов на определенную машину (чтобы она нас принимала за ту которую она ищет, ну и перетереть 
 ответ от настоящей машины)
 5. ip a (или ip addr) - показывает все интерфейсы с их настройками
 6. dhclient - спрашивает и прописывает себе айпи у dhcp сервера
 7. dhclient - r - посылает сигнал release чтобы высвободить свой айпи
 8. apt install yersinia - установка пакета 
 9. vim /etc/resolv.conf - файл настроек днс, в котором можно поменять nameserver на 8.8.8.8
 10. yersinia -I - инструмент для атак по L2, там кнопка  g - выбор типа атаки, затем x - выбор конкретной атаки или действия, l - что бы остановить действие
 11. vim /etc/hostname - поменять имя хоста
 12. ifup ens7 - стартануть интерфейс который только создали
TRUNK 
 13. создать вируальный интерфейс и подинтерфесы у него со статическими айпишниками
vim /etc/network/interfaces
auto ens4
iface ens4 inet manual - значит не раздавать ему айпишник потому что у него будут виртуальные интерфейсы
auto ens4.10 - по названию вилана
iface ens4.10 inet static
                  address 10.0.20.254/24
и так далее для каждого вилана
IpTables
 есть 5 зон - input preforwarding forwarding postforwarding output
 14. iptables -L - список фаерволов
 15. vim /etc/sysctl.conf - включить форвардинг для того чтобы линукс работал как роутер, там раскомментировать строчку net.ipv4.ip_forward=1
 16. sysctl -p - применить настройку ядра
 17. iptables -t nat -A POSTROUTING -o ens3 -j MASQUERADE - создаём правило для цепочки нат которое на построутинге будет делать натинг маскарадом всего трафика который 
 выходит с интерфейса ens3
 18. iptables -t nat -L -v - посмотреть вербос режиме все правила для цепочек натинга
 19. iptables -L -v --line-number
 20. iptables -A FORWARD -s 10.0.10.0/24 -d 10.0.10.0/24 -j DROP - правило при форвардинге из одной подсети в другую дропать весь трафик
 21. iptables -I FORWARD 1 -s 10.0.10.0/24 -d 10.0.10.0/24 -m state --state ESTABLISHED,RELATED -j ACCEPT - правило которое вставляется на одну строчку выше в правилах 
 форвардинга что из одной сети к другой соединения которве уже установлены принимать - чтобы мог вернуться ответ от пинга
VPN L3
 22. curl -O  (https://raw.githubusercontent.com/angristan/openvpn-install/master/openvpn-install.sh)https://raw.githubusercontent.com/angristan/openvpn-install/master/openvpn 
 (https://raw.githubusercontent.com/angristan/openvpn-install/master/openvpn-install.sh)-install.sh
 23. bin/bash ./openvpn-install.sh
 24. vi /etc/ssh/sshd_config - раскомментируем чтобы рут мог логиниться по ссш
     PermitRootLogin yes
 25. service ssh restart
 26. vim lal.ovpn
     # explicit-exit-notify
     # ignore-unknown-option block-outside-dns
     # setenv opt block-outside-dns 
 27. mv lal.ovpn client.conf
 28. vim /etc/openvpn/server.conf
# push dhcp-options
# push redirect-gateway
 29. service openvpn restart
 30. на машине внутри сети
1. apt update && apt install openvpn -y
2. scp root@172.30.51.19:/root/client.conf /etc/openvpn
3. openvpn --config /etc/openvpn/client.conf &
 31. ip route add 192.168.1.0/24 via 10.8.0.2 - прописываем маршрутизацию от нас внутренней сети
 32. на машине внутри сети
1. iptables -t nat -A POSTROUTING -o ens3 -j MASQUERADE - для того чтобы мы могли выходить в из сети 10.8. в сеть 192.168
2. vim /etc/network/sysctl.conf - там раскомментировать форвардинг
3. sysctl -p
 33. echo 'iroute 192.168.0.1 255.255.255.0' > /etc/openvpn/ccd/client - создать файлик по названию конфига клиента и в него записать инфу о том что он знает ещё про сеть 192
 и трафик из неё пернаправляет в сеть 8.10
VPN L2
 1. vim /etc/openvpn/server.conf
вместо dev tun сделать dev tap, так же можно поменять udp на tcp
 2. service openvpn restart
 3. на клиенте 
1. поменять файл с настройкой на клиенте(сделать тоже самое /etc/openvpn/client.conf) 
2. перезапустить впн
3. apt install bridge-utils

4. vim /etc/network/interfaces - добавить туда интерфейс tap0 и bridge
    там прописать чтобы ens3 по которому машина получала айпи в локальной сети стал без айпи - manual
точно такой же создать tap0
   auto ens3 
   iface ens3 inet manual
   auto tap0
   iface tap0 inet manual
   auto br0
   iface br0 inet dhcp 
                 bringe_ports ens3 tap0
5. service networking restart
 4. dhclient tap0 - получаем ip 192 сетки по L2 на интерфейс tap0
 5. netdiscover -i tap0 - запускаем сканирование сети
 6. nmap 192.168.1.105 -O - просканировать только этот хост подробней
 7. arpspoof -i tap0 -t 192.168.1.1 -r 192.168.1.105 - запуск перехвата трафика от 105 машины к гетвею на 1 машине
 
 ### VPCS
 1. ip new_ip - процесс назначения статического айпи
 2. ip dhcp - получить айпи адрес по dhcp
 3. dhcp -r - отдать айпишник
 4. save - сохранить настройки чтобы например он каждый раз шёл за айпи к дшцп
 5. trace 10.0.0.1 - посмотреть трассировку до айпи
 
 ### Windows
 1. ipconfig - показывает настройки сети
 2. ipconfig /release - освобождает айпи адрес
 3. ipconfig /renew - просит заново айпи адрес
 4. set - показывает переменные окружения
 5. netstat -na - показывает какие порты у нас есть
 
 ### MicroTik
login: admin, password: null
 1.  interface print
 2. ip address
 3. add address=11.2.1.2/24 interface=ether2
 4. add address=11.2.0.2/24 interface=ether1
 5. /
 6. ip address print
 7. ip route print
 8. ip route
 9. add dst-address= 11.0.0.0/24 gateway=ether1
 10. system indentity set name=M-R-11
 11. export - посмотреть полный конфиг
 12. ip dhcp-client remove 0 - удалить из конфига дхцп 
 RIP
 13. routing rip
 14. network
 15. add  network=10.0.7.0/24
OSPF
 1. interface bridge add name=loopback - это нужно т.к. в микротиках нельзя создать напрямую лупбэк, а он нужен для того что бы если у нас упадет реальный интерфейс на порту 
 не падал ospf
 2. ip address add interface=loopback address=13.13.13.13/32 - задать любой айпи которого нет в системе
 3. routing ospf instance set route-id=13.13.13.13 numbers=0 - выбор на какой инстанс ospf назначать айпи адрес
 4. routing ospf network
 5. add network=11.0.5.0/24 area=backbone
